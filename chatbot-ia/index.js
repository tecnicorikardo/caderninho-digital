require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const admin = require('firebase-admin');
const Groq = require('groq-sdk');
const express = require('express');

// --- Configura√ß√µes ---
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const FIREBASE_PROJECT_ID = 'web-gestao-37a85'; // SEU PROJECT ID CORRETO
const PORT = process.env.PORT || 10000;

// Inicializa o Telegram Bot
let bot;
if (process.env.NODE_ENV === 'production') {
  // Em produ√ß√£o, usar webhook
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN);
  console.log('ü§ñ Telegram bot inicializado (webhook mode)...');
} else {
  // Em desenvolvimento, usar polling
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
  console.log('ü§ñ Telegram bot inicializado (polling mode)...');
}

// Inicializa o Firebase Admin SDK
let db;
try {
  // Para produ√ß√£o, use vari√°vel de ambiente
  if (process.env.FIREBASE_SERVICE_ACCOUNT) {
    const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      projectId: FIREBASE_PROJECT_ID
    });
  } else {
    // Para desenvolvimento local
    const serviceAccount = require('./serviceAccountKey.json');
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      projectId: FIREBASE_PROJECT_ID
    });
  }
  
  db = admin.firestore();
  console.log('üî• Firebase Admin SDK inicializado com sucesso!');
  console.log('üìä Conectado ao projeto:', FIREBASE_PROJECT_ID);
  
  // Testar conex√£o imediatamente
  db.collection('sales').limit(1).get()
    .then(snapshot => {
      console.log('‚úÖ Teste de conex√£o Firebase: OK');
      console.log(`üìã Cole√ß√£o sales: ${snapshot.size} documentos encontrados`);
    })
    .catch(err => {
      console.error('‚ùå Erro no teste de conex√£o:', err.message);
    });
    
} catch (error) {
  console.error('‚ùå ERRO CR√çTICO ao inicializar Firebase:', error.message);
  console.error('üîç Detalhes:', error);
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Sistema funcionar√° com dados simulados!');
  db = null;
}

// Inicializa Groq SDK
const groq = new Groq({
  apiKey: GROQ_API_KEY
});
console.log('üß† Groq SDK inicializado...');

// --- Mapeamento de usu√°rios Telegram para Firebase ---
const userMapping = new Map();

// --- Fun√ß√µes para extrair dados dos textos ---

function extractSaleData(text) {
  const saleData = {
    total: 0,
    clientName: 'Cliente n√£o informado',
    productName: 'Produto n√£o informado',
    quantity: 1
  };
  
  // Extrair valor (R$ 50, 50 reais, 50.00, etc.)
  const valueRegex = /(?:R\$\s*)?(\d+(?:[.,]\d{1,2})?)\s*(?:reais?)?/i;
  const valueMatch = text.match(valueRegex);
  if (valueMatch) {
    saleData.total = parseFloat(valueMatch[1].replace(',', '.'));
  }
  
  // Extrair nome do cliente (para Jo√£o, cliente Maria, etc.)
  const clientRegex = /(?:para|cliente)\s+([A-Za-z√Ä-√ø\s]+?)(?:\s|$|produto|R\$|\d)/i;
  const clientMatch = text.match(clientRegex);
  if (clientMatch) {
    saleData.clientName = clientMatch[1].trim();
  }
  
  // Extrair produto
  const productRegex = /(?:produto|item)\s+([A-Za-z√Ä-√ø\s]+?)(?:\s|$|R\$|\d)/i;
  const productMatch = text.match(productRegex);
  if (productMatch) {
    saleData.productName = productMatch[1].trim();
  }
  
  return saleData;
}

function extractClientData(text) {
  const clientData = {
    name: '',
    phone: '',
    email: ''
  };
  
  // Extrair nome (cliente Jo√£o Silva, cadastrar Maria Santos, etc.)
  const nameRegex = /(?:cliente|cadastrar|novo)\s+([A-Za-z√Ä-√ø\s]+?)(?:\s|$|telefone|email|\d)/i;
  const nameMatch = text.match(nameRegex);
  if (nameMatch) {
    clientData.name = nameMatch[1].trim();
  }
  
  // Extrair telefone
  const phoneRegex = /(?:telefone|fone|cel)\s*(\d{10,11})/i;
  const phoneMatch = text.match(phoneRegex);
  if (phoneMatch) {
    clientData.phone = phoneMatch[1];
  }
  
  // Extrair email
  const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/;
  const emailMatch = text.match(emailRegex);
  if (emailMatch) {
    clientData.email = emailMatch[1];
  }
  
  return clientData;
}

function extractProductData(text) {
  const productData = {
    name: '',
    price: 0,
    quantity: 0
  };
  
  // Extrair nome do produto
  const nameRegex = /(?:produto|item|cadastrar)\s+([A-Za-z√Ä-√ø\s]+?)(?:\s|$|pre√ßo|R\$|\d)/i;
  const nameMatch = text.match(nameRegex);
  if (nameMatch) {
    productData.name = nameMatch[1].trim();
  }
  
  // Extrair pre√ßo
  const priceRegex = /(?:pre√ßo|R\$)\s*(\d+(?:[.,]\d{1,2})?)/i;
  const priceMatch = text.match(priceRegex);
  if (priceMatch) {
    productData.price = parseFloat(priceMatch[1].replace(',', '.'));
  }
  
  // Extrair quantidade/estoque
  const qtyRegex = /(?:estoque|quantidade)\s*(\d+)/i;
  const qtyMatch = text.match(qtyRegex);
  if (qtyMatch) {
    productData.quantity = parseInt(qtyMatch[1]);
  }
  
  return productData;
}

// Fun√ß√£o para buscar todos os userIds do Firebase
async function getAllFirebaseUserIds() {
  if (!db) {
    console.log('‚ö†Ô∏è Firebase n√£o conectado - retornando lista vazia');
    return [];
  }
  
  try {
    const userIds = new Set();
    
    // Buscar em todas as cole√ß√µes para encontrar userIds √∫nicos
    const collections = ['sales', 'clients', 'products', 'users'];
    
    console.log('üîç Buscando contas de clientes no Firebase...');
    
    for (const collectionName of collections) {
      try {
        console.log(`üìã Verificando cole√ß√£o: ${collectionName}`);
        const snapshot = await db.collection(collectionName).get();
        console.log(`üìä ${collectionName}: ${snapshot.size} documentos encontrados`);
        
        snapshot.forEach(doc => {
          const data = doc.data();
          
          if (data.userId) {
            userIds.add(data.userId);
            console.log(`‚úÖ Cliente encontrado: ${data.userId}`);
          }
          
          // Para cole√ß√£o users, tamb√©m verificar o ID do documento
          if (collectionName === 'users') {
            userIds.add(doc.id);
            console.log(`‚úÖ Usu√°rio encontrado: ${doc.id}`);
          }
        });
      } catch (collectionError) {
        console.error(`‚ùå Erro na cole√ß√£o ${collectionName}:`, collectionError.message);
      }
    }
    
    const userIdArray = Array.from(userIds);
    console.log(`üéØ Total de contas encontradas: ${userIdArray.length}`);
    console.log('üìã Contas dispon√≠veis:', userIdArray);
    
    return userIdArray;
  } catch (error) {
    console.error('‚ùå Erro ao buscar contas:', error);
    return [];
  }
}

// Fun√ß√£o para buscar dados do usu√°rio por email (para login p√∫blico)
async function findUserByEmail(email) {
  if (!db) return null;
  
  try {
    console.log(`üîç Buscando usu√°rio por email: ${email}`);
    
    // Buscar na cole√ß√£o users primeiro
    const usersSnapshot = await db.collection('users').where('email', '==', email).limit(1).get();
    
    if (!usersSnapshot.empty) {
      const userDoc = usersSnapshot.docs[0];
      console.log(`‚úÖ Usu√°rio encontrado na cole√ß√£o users: ${userDoc.id}`);
      return {
        userId: userDoc.id,
        userData: userDoc.data()
      };
    }
    
    // Se n√£o encontrou na cole√ß√£o users, buscar em sales por email
    const salesSnapshot = await db.collection('sales').where('userEmail', '==', email).limit(1).get();
    
    if (!salesSnapshot.empty) {
      const saleDoc = salesSnapshot.docs[0];
      const saleData = saleDoc.data();
      console.log(`‚úÖ Usu√°rio encontrado via vendas: ${saleData.userId}`);
      return {
        userId: saleData.userId,
        userData: { email: email }
      };
    }
    
    console.log(`‚ùå Usu√°rio n√£o encontrado: ${email}`);
    return null;
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rio por email:', error);
    return null;
  }
}

// Fun√ß√£o para registrar/obter userId
function getUserId(telegramUserId, firstName) {
  if (!userMapping.has(telegramUserId)) {
    // Usar ID baseado no Telegram por padr√£o
    const userId = `telegram_${telegramUserId}`;
    userMapping.set(telegramUserId, {
      firebaseUserId: userId,
      firstName: firstName,
      registeredAt: new Date(),
      isAuthenticated: false
    });
    console.log(`üë§ Novo usu√°rio registrado: ${firstName} (${userId})`);
  }
  return userMapping.get(telegramUserId).firebaseUserId;
}

// Fun√ß√£o para autenticar usu√°rio com dados reais
async function authenticateUser(telegramUserId, targetUserId) {
  if (!db) return false;
  
  try {
    // Verificar se o userId existe no Firebase
    const salesRef = db.collection('sales').where('userId', '==', targetUserId).limit(1);
    const snapshot = await salesRef.get();
    
    if (!snapshot.empty) {
      // Atualizar mapeamento para usar o userId real
      const userData = userMapping.get(telegramUserId) || {};
      userMapping.set(telegramUserId, {
        ...userData,
        firebaseUserId: targetUserId,
        isAuthenticated: true,
        authenticatedAt: new Date()
      });
      
      console.log(`‚úÖ Usu√°rio autenticado: ${targetUserId}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o:', error);
    return false;
  }
}

// --- Fun√ß√µes Firebase REAIS ---

// Fun√ß√£o para registrar nova venda
async function registerSale(userId, saleData) {
  if (!db) {
    throw new Error('Firebase n√£o conectado');
  }
  
  try {
    const sale = {
      userId: userId,
      total: saleData.total,
      clientName: saleData.clientName || 'Cliente n√£o informado',
      productName: saleData.productName || 'Produto n√£o informado',
      quantity: saleData.quantity || 1,
      paymentStatus: saleData.paymentStatus || 'pago',
      paymentMethod: saleData.paymentMethod || 'dinheiro',
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };
    
    const docRef = await db.collection('sales').add(sale);
    console.log(`‚úÖ Venda registrada: ${docRef.id}`);
    
    return {
      success: true,
      id: docRef.id,
      sale: sale
    };
  } catch (error) {
    console.error('‚ùå Erro ao registrar venda:', error);
    throw error;
  }
}

// Fun√ß√£o para cadastrar cliente
async function registerClient(userId, clientData) {
  if (!db) {
    throw new Error('Firebase n√£o conectado');
  }
  
  try {
    const client = {
      userId: userId,
      name: clientData.name,
      phone: clientData.phone || '',
      email: clientData.email || '',
      address: clientData.address || '',
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };
    
    const docRef = await db.collection('clients').add(client);
    console.log(`‚úÖ Cliente cadastrado: ${docRef.id}`);
    
    return {
      success: true,
      id: docRef.id,
      client: client
    };
  } catch (error) {
    console.error('‚ùå Erro ao cadastrar cliente:', error);
    throw error;
  }
}

// Fun√ß√£o para cadastrar produto
async function registerProduct(userId, productData) {
  if (!db) {
    throw new Error('Firebase n√£o conectado');
  }
  
  try {
    const product = {
      userId: userId,
      name: productData.name,
      price: productData.price,
      salePrice: productData.salePrice || productData.price,
      quantity: productData.quantity || 0,
      minQuantity: productData.minQuantity || 5,
      category: productData.category || 'Geral',
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };
    
    const docRef = await db.collection('products').add(product);
    console.log(`‚úÖ Produto cadastrado: ${docRef.id}`);
    
    return {
      success: true,
      id: docRef.id,
      product: product
    };
  } catch (error) {
    console.error('‚ùå Erro ao cadastrar produto:', error);
    throw error;
  }
}

async function getSalesSummary(userId) {
  if (!db) {
    // Dados simulados quando Firebase n√£o est√° conectado
    return {
      totalToday: 0.00,
      countToday: 0,
      averageTicket: 0.00,
      sales: [],
      pendingPayments: [],
      isSimulated: true
    };
  }

  try {
    console.log(`üìä Buscando vendas para usu√°rio: ${userId}`);
    
    // Primeiro, vamos ver TODAS as vendas para debug
    console.log('üîç DEBUG: Verificando TODAS as vendas primeiro...');
    const allSalesSnapshot = await db.collection('sales').get();
    console.log(`üìã Total de vendas no sistema: ${allSalesSnapshot.size}`);
    
    allSalesSnapshot.forEach((doc, index) => {
      const data = doc.data();
      console.log(`üìÑ Venda ${index + 1}:`, {
        id: doc.id,
        userId: data.userId,
        total: data.total,
        clientName: data.clientName
      });
    });
    
    // Agora buscar vendas do usu√°rio espec√≠fico
    const salesRef = db.collection('sales').where('userId', '==', userId);
    const snapshot = await salesRef.get();
    
    console.log(`üéØ Vendas encontradas para userId '${userId}': ${snapshot.size}`);
    
    if (snapshot.empty) {
      console.log('üì≠ Nenhuma venda encontrada para este usu√°rio');
      return {
        totalToday: 0.00,
        countToday: 0,
        averageTicket: 0.00,
        sales: [],
        pendingPayments: [],
        isSimulated: false
      };
    }

    const sales = [];
    const today = new Date();
    const todayString = today.toISOString().split('T')[0];
    
    let totalToday = 0;
    let countToday = 0;
    const pendingPayments = [];

    snapshot.forEach((doc) => {
      const data = doc.data();
      const sale = {
        id: doc.id,
        ...data,
        createdAt: data.createdAt?.toDate() || new Date(),
        updatedAt: data.updatedAt?.toDate() || new Date()
      };
      
      sales.push(sale);
      
      // Verificar se √© venda de hoje
      const saleDate = sale.createdAt.toISOString().split('T')[0];
      if (saleDate === todayString) {
        totalToday += sale.total || 0;
        countToday++;
      }
      
      // Verificar pagamentos pendentes
      if (sale.paymentStatus === 'pendente' || sale.paymentStatus === 'parcial') {
        pendingPayments.push({
          id: sale.id,
          total: sale.total,
          clientName: sale.clientName || 'Cliente n√£o informado',
          remainingAmount: sale.remainingAmount || sale.total,
          dueDate: sale.createdAt.toISOString().split('T')[0]
        });
      }
    });

    const averageTicket = countToday > 0 ? totalToday / countToday : 0;

    console.log(`‚úÖ Encontradas ${sales.length} vendas, ${countToday} hoje`);
    
    return {
      totalToday,
      countToday,
      averageTicket,
      sales: sales.slice(0, 5), // √öltimas 5 vendas
      pendingPayments,
      isSimulated: false
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar vendas:', error);
    throw error;
  }
}

async function getClientsSummary(userId) {
  if (!db) {
    return {
      total: 0,
      newThisMonth: 0,
      withPendingPayments: 0,
      topClients: [],
      isSimulated: true
    };
  }

  try {
    console.log(`üë• Buscando clientes para usu√°rio: ${userId}`);
    
    // Primeiro, buscar clientes na cole√ß√£o clients
    const clientsRef = db.collection('clients').where('userId', '==', userId);
    const snapshot = await clientsRef.get();
    
    console.log(`üìã Clientes na cole√ß√£o clients: ${snapshot.size}`);
    
    const clients = [];
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    let newThisMonth = 0;

    snapshot.forEach((doc) => {
      const data = doc.data();
      const client = {
        id: doc.id,
        ...data,
        createdAt: data.createdAt?.toDate() || new Date()
      };
      
      clients.push(client);
      
      // Verificar se √© cliente novo este m√™s
      const clientMonth = client.createdAt.getMonth();
      const clientYear = client.createdAt.getFullYear();
      if (clientMonth === currentMonth && clientYear === currentYear) {
        newThisMonth++;
      }
    });

    // Se n√£o h√° clientes cadastrados, extrair das vendas
    let clientsFromSales = new Map();
    const salesRef = db.collection('sales').where('userId', '==', userId);
    const salesSnapshot = await salesRef.get();
    
    console.log(`üìä Vendas encontradas: ${salesSnapshot.size}`);
    
    salesSnapshot.forEach((doc) => {
      const sale = doc.data();
      if (sale.clientName && sale.clientName.trim() !== '') {
        const clientKey = sale.clientName.toLowerCase();
        if (!clientsFromSales.has(clientKey)) {
          clientsFromSales.set(clientKey, {
            name: sale.clientName,
            totalPurchases: 0,
            purchaseCount: 0
          });
        }
        const client = clientsFromSales.get(clientKey);
        client.totalPurchases += sale.total || 0;
        client.purchaseCount += 1;
      }
    });

    // Se n√£o h√° clientes cadastrados, usar dados das vendas
    let topClients = [];
    if (clients.length === 0 && clientsFromSales.size > 0) {
      console.log(`üìù Extraindo ${clientsFromSales.size} clientes das vendas`);
      
      topClients = Array.from(clientsFromSales.values())
        .sort((a, b) => b.totalPurchases - a.totalPurchases)
        .slice(0, 5);
        
      return {
        total: clientsFromSales.size,
        newThisMonth: 0, // N√£o temos data de cadastro das vendas
        withPendingPayments: 0,
        topClients,
        isSimulated: false,
        source: 'sales' // Indicar que veio das vendas
      };
    }

    // Calcular top clientes da cole√ß√£o clients
    const clientPurchases = new Map();
    
    salesSnapshot.forEach((doc) => {
      const sale = doc.data();
      if (sale.clientId) {
        const current = clientPurchases.get(sale.clientId) || 0;
        clientPurchases.set(sale.clientId, current + (sale.total || 0));
      }
    });

    topClients = clients
      .map(client => ({
        id: client.id,
        name: client.name,
        totalPurchases: clientPurchases.get(client.id) || 0
      }))
      .filter(client => client.totalPurchases > 0)
      .sort((a, b) => b.totalPurchases - a.totalPurchases)
      .slice(0, 5);

    console.log(`‚úÖ Encontrados ${clients.length} clientes cadastrados`);
    
    return {
      total: clients.length,
      newThisMonth,
      withPendingPayments: 0,
      topClients,
      isSimulated: false,
      source: 'clients'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar clientes:', error);
    return {
      total: 0,
      newThisMonth: 0,
      withPendingPayments: 0,
      topClients: [],
      isSimulated: false,
      error: error.message
    };
  }
}

async function getProductsSummary(userId) {
  if (!db) {
    return {
      total: 0,
      lowStock: 0,
      totalValue: 0.00,
      productsLowStock: [],
      isSimulated: true
    };
  }

  try {
    console.log(`üì¶ Buscando produtos para usu√°rio: ${userId}`);
    
    // Buscar produtos na cole√ß√£o products
    const productsRef = db.collection('products').where('userId', '==', userId);
    const snapshot = await productsRef.get();
    
    console.log(`üìã Produtos na cole√ß√£o products: ${snapshot.size}`);

    const products = [];
    let totalValue = 0;
    const productsLowStock = [];

    snapshot.forEach((doc) => {
      const data = doc.data();
      const product = {
        id: doc.id,
        ...data
      };
      
      products.push(product);
      
      // Calcular valor total do estoque
      totalValue += (product.quantity || 0) * (product.salePrice || product.price || 0);
      
      // Verificar estoque baixo
      const minQty = product.minQuantity || 5;
      if ((product.quantity || 0) <= minQty) {
        productsLowStock.push({
          id: product.id,
          name: product.name || 'Produto sem nome',
          quantity: product.quantity || 0,
          minQuantity: minQty
        });
      }
    });

    // Se n√£o h√° produtos cadastrados, extrair das vendas
    if (products.length === 0) {
      console.log(`üìä Nenhum produto cadastrado, extraindo das vendas...`);
      
      const salesRef = db.collection('sales').where('userId', '==', userId);
      const salesSnapshot = await salesRef.get();
      
      const productsFromSales = new Map();
      
      salesSnapshot.forEach((doc) => {
        const sale = doc.data();
        
        // Verificar se h√° produtos na venda
        if (sale.products && Array.isArray(sale.products)) {
          sale.products.forEach(product => {
            if (product.name) {
              const key = product.name.toLowerCase();
              if (!productsFromSales.has(key)) {
                productsFromSales.set(key, {
                  name: product.name,
                  totalSold: 0,
                  revenue: 0,
                  price: product.price || 0
                });
              }
              const p = productsFromSales.get(key);
              p.totalSold += product.quantity || 1;
              p.revenue += (product.quantity || 1) * (product.price || 0);
            }
          });
        }
        
        // Se n√£o h√° array de produtos, usar campos diretos
        if (sale.productName || sale.product) {
          const productName = sale.productName || sale.product;
          const key = productName.toLowerCase();
          if (!productsFromSales.has(key)) {
            productsFromSales.set(key, {
              name: productName,
              totalSold: 0,
              revenue: 0,
              price: sale.productPrice || 0
            });
          }
          const p = productsFromSales.get(key);
          p.totalSold += sale.quantity || 1;
          p.revenue += sale.total || 0;
        }
      });
      
      if (productsFromSales.size > 0) {
        console.log(`üìù Extra√≠dos ${productsFromSales.size} produtos das vendas`);
        
        return {
          total: productsFromSales.size,
          lowStock: 0, // N√£o temos controle de estoque das vendas
          totalValue: Array.from(productsFromSales.values()).reduce((sum, p) => sum + p.revenue, 0),
          productsFromSales: Array.from(productsFromSales.values()).slice(0, 10),
          isSimulated: false,
          source: 'sales'
        };
      }
      
      return {
        total: 0,
        lowStock: 0,
        totalValue: 0.00,
        productsLowStock: [],
        isSimulated: false,
        source: 'empty'
      };
    }

    console.log(`‚úÖ Encontrados ${products.length} produtos cadastrados`);
    
    return {
      total: products.length,
      lowStock: productsLowStock.length,
      totalValue,
      productsLowStock: productsLowStock.slice(0, 10),
      isSimulated: false,
      source: 'products'
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar produtos:', error);
    return {
      total: 0,
      lowStock: 0,
      totalValue: 0.00,
      productsLowStock: [],
      isSimulated: false,
      error: error.message
    };
  }
}

// --- Comandos do Bot Telegram ---

// --- Fun√ß√£o auxiliar para enviar mensagens com bot√µes ---
async function sendMessageWithButtons(chatId, message, buttons) {
  const options = {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: buttons
    }
  };
  
  try {
    await bot.sendMessage(chatId, message, options);
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem com bot√µes:', error);
    // Fallback: enviar mensagem sem bot√µes
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }
}

// Comando /start - SOLICITA LOGIN
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  let userData = userMapping.get(msg.from.id);
  
  // Se j√° est√° autenticado, mostrar menu principal
  if (userData?.isAuthenticated) {
    const welcomeMessage = `üëã *Oi novamente, ${msg.from.first_name}!*

‚úÖ *Voc√™ est√° conectado √† sua conta*
üÜî *ID:* \`${userData.firebaseUserId}\`

üí¨ *O que gostaria de saber sobre seu neg√≥cio?*`;

    const buttons = [
      [
        { text: 'üìä Vendas', callback_data: 'vendas_detalhadas' },
        { text: 'üë• Clientes', callback_data: 'clientes_detalhados' }
      ],
      [
        { text: 'üì¶ Estoque', callback_data: 'estoque_detalhado' },
        { text: 'üîÑ Trocar Conta', callback_data: 'logout_confirm' }
      ]
    ];
    
    await sendMessageWithButtons(chatId, welcomeMessage, buttons);
    return;
  }
  
  // Se n√£o est√° autenticado, PERGUNTAR para fazer login
  const welcomeMessage = `üéâ *Ol√°, ${msg.from.first_name}!*

ü§ñ *Caderninho Digital - Assistente IA*
üíº *Chatbot P√öBLICO para empres√°rios*

üîê *FA√áA LOGIN COM SUA CONTA:*

üìß *Login com email e senha:*
\`/login seu@email.com suasenha\`

üÜî *Login direto com ID:*
\`/login seu_user_id\`

‚ùì *N√£o tem conta empresarial?*
üåê *Cadastre-se GR√ÅTIS:* https://web-gestao-37a85.web.app

üë• *Este bot √© p√∫blico - seus clientes podem usar!*
üì± *Compartilhe este bot com outros empres√°rios*

üí° *Dica:* Use os bot√µes para ajuda!`;

  const buttons = [
    [
      { text: 'üîê Como fazer login?', callback_data: 'help_login' },
      { text: 'üìã Ver contas dispon√≠veis', callback_data: 'list_users' }
    ],
    [
      { text: '‚ùì Ajuda completa', callback_data: 'ajuda_completa' },
      { text: 'üåê Acessar sistema', callback_data: 'open_system' }
    ]
  ];
  
  await sendMessageWithButtons(chatId, welcomeMessage, buttons);
});

// Comando /ajuda
bot.onText(/\/ajuda/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `‚ùì *Central de Ajuda - Caderninho Digital Bot*

üè¢ *Para empres√°rios que usam o Caderninho Digital*

üîê *Como conectar sua conta:*
\`/login seu@email.com suasenha\`

üìä *Comandos dispon√≠veis:*
/start - Menu inicial
/ajuda - Esta ajuda
/status - Status da sua conex√£o
/logout - Desconectar da conta

üìã *Comandos de cadastro:*
/venda - Registrar nova venda
/cliente - Cadastrar cliente
/produto - Cadastrar produto
/pagamento - Registrar pagamento

üí¨ *Consultas que posso fazer:*
‚Ä¢ "Quanto vendi hoje?"
‚Ä¢ "Quantos clientes tenho?"
‚Ä¢ "Produtos com estoque baixo?"
‚Ä¢ "Quem est√° devendo?"
‚Ä¢ "Resumo financeiro do m√™s"

üìù *Cadastros que posso fazer:*
‚Ä¢ "Registrar venda de R$ 50 para Jo√£o"
‚Ä¢ "Cadastrar cliente Maria Silva"
‚Ä¢ "Adicionar produto Camiseta R$ 25"
‚Ä¢ "Cliente Jo√£o pagou R$ 30"

ü§ñ *Intelig√™ncia Artificial:*
Converse naturalmente comigo! Entendo tanto consultas quanto cadastros.

üåê *Sistema completo:*
https://web-gestao-37a85.web.app`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Comando /status
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;
  const firebaseStatus = db ? 'üü¢ Conectado' : 'üî¥ Desconectado (dados simulados)';
  const groqStatus = GROQ_API_KEY ? 'üü¢ Conectado' : 'üî¥ N√£o configurado';
  const currentUserId = getUserId(msg.from.id, msg.from.first_name);
  const userData = userMapping.get(msg.from.id);
  const authStatus = userData?.isAuthenticated ? 'üü¢ Autenticado' : 'üü° N√£o autenticado';
  
  const statusMessage = `üìä *Status do Sistema*

üî• *Firebase:* ${firebaseStatus}
üß† *Groq AI:* ${groqStatus}
ü§ñ *Bot:* üü¢ Online
üîê *Autentica√ß√£o:* ${authStatus}

üë§ *Seu ID atual:* \`${currentUserId}\`

${!userData?.isAuthenticated ? '\n‚ö†Ô∏è *Para ver seus dados reais, use /login*' : ''}
${!db ? '\n‚ö†Ô∏è *Aviso:* Firebase desconectado. Usando dados simulados.' : ''}`;

  bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
});

// Comando /forcelogin - login autom√°tico com primeira conta encontrada
bot.onText(/\/forcelogin/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    bot.sendMessage(chatId, 'üîê Buscando contas dispon√≠veis...');
    
    if (!db) {
      bot.sendMessage(chatId, '‚ùå *Firebase n√£o conectado*\n\nSistema est√° usando dados simulados.\n\nüîß Verifique a configura√ß√£o do Firebase.', { parse_mode: 'Markdown' });
      return;
    }
    
    const userIds = await getAllFirebaseUserIds();
    
    if (userIds.length === 0) {
      bot.sendMessage(chatId, '‚ùå *Nenhuma conta encontrada*\n\nüì≠ O sistema n√£o possui dados cadastrados ainda.\n\nüåê *Cadastre-se primeiro em:*\nhttps://web-gestao-37a85.web.app\n\nüí° *Depois volte e use:* `/forcelogin`', { parse_mode: 'Markdown' });
      return;
    }
    
    // Usar a primeira conta encontrada
    const targetUserId = userIds[0];
    bot.sendMessage(chatId, `üîê Conectando com conta: \`${targetUserId}\`...`, { parse_mode: 'Markdown' });
    
    const success = await authenticateUser(msg.from.id, targetUserId);
    
    if (success) {
      bot.sendMessage(chatId, `‚úÖ *CONECTADO COM DADOS REAIS!*\n\nüÜî *Conta:* \`${targetUserId}\`\nüïê *Conectado:* ${new Date().toLocaleString('pt-BR')}\n\nüéâ *Agora voc√™ pode consultar dados reais!*\n\nüí¨ *Teste estas perguntas:*\n‚Ä¢ "Quanto vendi hoje?"\n‚Ä¢ "Quantos clientes tenho?"\n‚Ä¢ "Como est√° meu estoque?"\n‚Ä¢ "Resumo do m√™s"\n\nü§ñ *Ou use os bot√µes:*`, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä Ver Vendas', callback_data: 'vendas_detalhadas' },
              { text: 'üë• Ver Clientes', callback_data: 'clientes_detalhados' }
            ],
            [
              { text: 'üì¶ Ver Estoque', callback_data: 'estoque_detalhado' },
              { text: 'üìà Dashboard', callback_data: 'dashboard' }
            ]
          ]
        }
      });
    } else {
      bot.sendMessage(chatId, `‚ùå *Erro na conex√£o*\n\nN√£o foi poss√≠vel conectar com a conta \`${targetUserId}\`\n\nüîÑ *Tente:*\n‚Ä¢ \`/debug\` - verificar dados\n‚Ä¢ \`/usuarios\` - ver contas dispon√≠veis`, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error('‚ùå Erro no forcelogin:', error);
    bot.sendMessage(chatId, `‚ùå *Erro no login autom√°tico*\n\n\`${error.message}\`\n\nüîß Use \`/debug\` para verificar o sistema.`, { parse_mode: 'Markdown' });
  }
});

// Comando /debug - verificar dados REAIS no Firebase
bot.onText(/\/debug/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!db) {
    bot.sendMessage(chatId, '‚ùå *Firebase n√£o conectado*\n\n‚ö†Ô∏è Sistema est√° usando dados simulados.\n\nüîß *Verifique:*\n‚Ä¢ Arquivo serviceAccountKey.json\n‚Ä¢ Vari√°veis de ambiente\n‚Ä¢ Conex√£o com internet', { parse_mode: 'Markdown' });
    return;
  }
  
  try {
    bot.sendMessage(chatId, 'üîç Analisando dados REAIS no Firebase...');
    
    let debugInfo = 'üîç *Status dos Dados REAIS*\n\n';
    debugInfo += `üî• *Firebase:* ‚úÖ Conectado\n`;
    debugInfo += `üìä *Projeto:* ${FIREBASE_PROJECT_ID}\n\n`;
    
    // Verificar cada cole√ß√£o com mais detalhes
    const collections = ['sales', 'clients', 'products', 'users'];
    let totalDocs = 0;
    const userId = 'ECYMxTpm46b2iNUNU0aNHIbdfTJ2'; // Seu userId
    
    for (const collectionName of collections) {
      try {
        const snapshot = await db.collection(collectionName).get();
        const userSnapshot = await db.collection(collectionName).where('userId', '==', userId).get();
        
        totalDocs += snapshot.size;
        debugInfo += `üìã *${collectionName}:*\n`;
        debugInfo += `‚îî Total: ${snapshot.size} documentos\n`;
        debugInfo += `‚îî Seus dados: ${userSnapshot.size} documentos\n`;
        
        if (snapshot.size > 0) {
          const firstDoc = snapshot.docs[0].data();
          debugInfo += `‚îî Exemplo userId: \`${firstDoc.userId || firstDoc.id || 'N/A'}\`\n`;
          
          // Mostrar alguns campos do primeiro documento
          if (collectionName === 'sales' && firstDoc.total) {
            debugInfo += `‚îî Exemplo venda: R$ ${firstDoc.total}\n`;
          }
          if (collectionName === 'clients' && firstDoc.name) {
            debugInfo += `‚îî Exemplo cliente: ${firstDoc.name}\n`;
          }
          if (collectionName === 'products' && firstDoc.name) {
            debugInfo += `‚îî Exemplo produto: ${firstDoc.name}\n`;
          }
        }
        
        // Mostrar dados espec√≠ficos do usu√°rio
        if (userSnapshot.size > 0) {
          const userDoc = userSnapshot.docs[0].data();
          if (collectionName === 'sales') {
            debugInfo += `‚îî Sua venda: R$ ${userDoc.total || 0}\n`;
          }
          if (collectionName === 'clients') {
            debugInfo += `‚îî Seu cliente: ${userDoc.name || 'N/A'}\n`;
          }
          if (collectionName === 'products') {
            debugInfo += `‚îî Seu produto: ${userDoc.name || 'N/A'}\n`;
          }
        }
        debugInfo += '\n';
      } catch (collError) {
        debugInfo += `üìã *${collectionName}:* ‚ùå Erro de acesso\n\n`;
      }
    }
    
    // Buscar todos os userIds
    const userIds = await getAllFirebaseUserIds();
    debugInfo += `üë• *Contas encontradas:* ${userIds.length}\n`;
    
    if (userIds.length > 0) {
      debugInfo += `\nüéØ *Contas dispon√≠veis:*\n`;
      userIds.slice(0, 3).forEach((id, index) => {
        debugInfo += `${index + 1}. \`${id}\`\n`;
      });
      debugInfo += `\nüí° *Teste login:* \`/login ${userIds[0]}\``;
    }
    
    debugInfo += `\n\nüìä *Resumo:*\n`;
    debugInfo += `‚Ä¢ Total de documentos: ${totalDocs}\n`;
    debugInfo += `‚Ä¢ Status: ${totalDocs > 0 ? '‚úÖ Dados encontrados' : '‚ö†Ô∏è Sem dados'}`;
    
    bot.sendMessage(chatId, debugInfo, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
    bot.sendMessage(chatId, `‚ùå *Erro no debug:*\n\n\`${error.message}\`\n\nüîß Verifique a configura√ß√£o do Firebase.`, { parse_mode: 'Markdown' });
  }
});

// Comando /testall - testar todas as fun√ß√µes
bot.onText(/\/testall/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = 'ECYMxTpm46b2iNUNU0aNHIbdfTJ2';
  
  if (!db) {
    bot.sendMessage(chatId, '‚ùå Firebase n√£o conectado');
    return;
  }
  
  try {
    bot.sendMessage(chatId, 'üß™ Testando todas as fun√ß√µes...');
    
    // Testar vendas
    bot.sendMessage(chatId, 'üìä Testando vendas...');
    const salesSummary = await getSalesSummary(userId);
    bot.sendMessage(chatId, `‚úÖ Vendas: ${salesSummary.countToday} hoje, R$ ${salesSummary.totalToday.toFixed(2)}`);
    
    // Testar clientes
    bot.sendMessage(chatId, 'üë• Testando clientes...');
    const clientsSummary = await getClientsSummary(userId);
    bot.sendMessage(chatId, `‚úÖ Clientes: ${clientsSummary.total} total, ${clientsSummary.newThisMonth} novos`);
    
    // Testar produtos
    bot.sendMessage(chatId, 'üì¶ Testando produtos...');
    const productsSummary = await getProductsSummary(userId);
    bot.sendMessage(chatId, `‚úÖ Produtos: ${productsSummary.total} total, R$ ${productsSummary.totalValue.toFixed(2)} em estoque`);
    
    bot.sendMessage(chatId, 'üéâ Teste completo finalizado!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    bot.sendMessage(chatId, `‚ùå Erro: ${error.message}`);
  }
});

// Comando /usuarios - listar usu√°rios (administrativo)
bot.onText(/\/usuarios/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!db) {
    bot.sendMessage(chatId, '‚ùå Sistema temporariamente indispon√≠vel.');
    return;
  }
  
  try {
    bot.sendMessage(chatId, 'üîç Verificando contas no sistema...');
    
    const userIds = await getAllFirebaseUserIds();
    
    if (userIds.length === 0) {
      bot.sendMessage(chatId, `üì≠ *Nenhuma conta empresarial encontrada*\n\nüåê *Seja o primeiro a se cadastrar:*\nhttps://caderninhodigital.netlify.app\n\nüíº *Benef√≠cios:*\n‚Ä¢ Gest√£o completa do seu neg√≥cio\n‚Ä¢ Relat√≥rios autom√°ticos\n‚Ä¢ Controle de estoque\n‚Ä¢ An√°lise de vendas`);
      return;
    }
    
    let message = `üìä *Status do Sistema*\n\nüë• *Contas empresariais ativas:* ${userIds.length}\n\nüîê *Para acessar sua conta:*\n\`/login seu@email.com suasenha\`\n\n`;
    
    if (userIds.length < 5) {
      message += `üÜî *IDs dispon√≠veis (para teste):*\n`;
      for (let i = 0; i < userIds.length && i < 3; i++) {
        const userId = userIds[i];
        message += `‚Ä¢ \`${userId}\`\n`;
      }
      message += `\nüí° *Teste r√°pido:* \`/login ${userIds[0]}\``;
    }
    
    message += `\n\nüåê *Sistema:*\nhttps://web-gestao-37a85.web.app`;
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('‚ùå Erro ao listar usu√°rios:', error);
    bot.sendMessage(chatId, '‚ùå Erro ao verificar sistema. Tente novamente.');
  }
});

// Comando /login - aceita tanto "email senha" quanto "userId" direto
bot.onText(/\/login (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const input = match[1].trim();
  
  // Se tem espa√ßo, √© email e senha
  if (input.includes(' ')) {
    const parts = input.split(' ');
    const email = parts[0];
    const password = parts[1];
    
    await handleEmailPasswordLogin(chatId, msg.from.id, email, password);
  } else {
    // Se n√£o tem espa√ßo, √© userId direto
    await handleUserIdLogin(chatId, msg.from.id, input);
  }
});

// Fun√ß√£o para login com email e senha (SISTEMA P√öBLICO)
async function handleEmailPasswordLogin(chatId, telegramUserId, email, password) {
  if (!db) {
    bot.sendMessage(chatId, '‚ùå Sistema temporariamente indispon√≠vel. Tente novamente em alguns minutos.');
    return;
  }
  
  try {
    bot.sendMessage(chatId, `üîê Verificando conta: ${email}...`);
    
    // Buscar usu√°rio por email no Firebase
    const userResult = await findUserByEmail(email);
    
    if (!userResult) {
      bot.sendMessage(chatId, `‚ùå *Email n√£o encontrado*\n\nüìß *Email:* ${email}\n\nüí° *Verifique se:*\n‚Ä¢ Digitou o email corretamente\n‚Ä¢ J√° se cadastrou no sistema\n‚Ä¢ J√° registrou vendas/produtos\n\nüåê *Cadastre-se em:*\nhttps://web-gestao-37a85.web.app\n\nüìã *Ver contas dispon√≠veis:* /usuarios`, { parse_mode: 'Markdown' });
      return;
    }
    
    // Por enquanto, aceitar qualquer senha (em produ√ß√£o, validar com Firebase Auth)
    // Simular valida√ß√£o de senha
    if (password.length < 3) {
      bot.sendMessage(chatId, `‚ùå *Senha muito simples*\n\nUse uma senha com pelo menos 3 caracteres.\n\nüí° *Tente novamente:*\n\`/login ${email} suasenha123\``);
      return;
    }
    
    const success = await authenticateUser(telegramUserId, userResult.userId);
    
    if (success) {
      // Salvar informa√ß√µes do usu√°rio
      const userData = userMapping.get(telegramUserId);
      userMapping.set(telegramUserId, {
        ...userData,
        email: email,
        loginMethod: 'email_password',
        realUserData: userResult.userData
      });
      
      bot.sendMessage(chatId, `‚úÖ *BEM-VINDO AO SEU ASSISTENTE!*\n\nüë§ *Conta:* ${email}\nüÜî *ID:* \`${userResult.userId}\`\nüïê *Conectado:* ${new Date().toLocaleString('pt-BR')}\n\nüéâ *Agora voc√™ pode consultar seus dados!*\n\nüí¨ *Experimente perguntar:*\n‚Ä¢ "Quanto vendi hoje?"\n‚Ä¢ "Como est√° meu estoque?"\n‚Ä¢ "Quem s√£o meus clientes?"\n‚Ä¢ "Resumo do m√™s"\n\nü§ñ *Ou use os bot√µes abaixo:*`, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä Ver Vendas', callback_data: 'vendas_detalhadas' },
              { text: 'üë• Ver Clientes', callback_data: 'clientes_detalhados' }
            ],
            [
              { text: 'üì¶ Ver Estoque', callback_data: 'estoque_detalhado' },
              { text: 'üìà Resumo Geral', callback_data: 'dashboard' }
            ]
          ]
        }
      });
    } else {
      bot.sendMessage(chatId, `‚ùå *Erro na autentica√ß√£o*\n\nN√£o foi poss√≠vel conectar √† sua conta.\n\nüîÑ *Tente novamente:*\n\`/login ${email} ${password}\`\n\nüìû *Suporte:* Entre em contato pelo sistema web`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no login:', error);
    bot.sendMessage(chatId, '‚ùå Erro durante autentica√ß√£o. Tente novamente em alguns minutos.');
  }
}

// Fun√ß√£o para login direto com userId
async function handleUserIdLogin(chatId, telegramUserId, targetUserId) {
  if (!db) {
    bot.sendMessage(chatId, '‚ùå Sistema temporariamente indispon√≠vel.');
    return;
  }
  
  try {
    bot.sendMessage(chatId, `üîê Conectando com userId: \`${targetUserId}\`...`, { parse_mode: 'Markdown' });
    
    const success = await authenticateUser(telegramUserId, targetUserId);
    
    if (success) {
      bot.sendMessage(chatId, `‚úÖ *Conectado com sucesso!*\n\nüÜî *UserID:* \`${targetUserId}\`\nüïê *Conectado em:* ${new Date().toLocaleString('pt-BR')}\n\nüéâ *Agora voc√™ pode consultar os dados!*\n\nüí¨ *Teste:*\n‚Ä¢ "Quanto vendi hoje?"\n‚Ä¢ "Como est√° meu estoque?"`, { parse_mode: 'Markdown' });
    } else {
      bot.sendMessage(chatId, `‚ùå *UserID n√£o encontrado*\n\nO userId \`${targetUserId}\` n√£o possui dados no sistema.\n\nUse /debug para ver userIds dispon√≠veis.`, { parse_mode: 'Markdown' });
    }
    
  } catch (error) {
    console.error('‚ùå Erro no login:', error);
    bot.sendMessage(chatId, '‚ùå Erro durante conex√£o. Tente novamente.');
  }
}

// Comando /login antigo (compatibilidade)
bot.onText(/\/login (.+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const email = match[1].trim();
  const password = match[2].trim();
  
  if (!db) {
    bot.sendMessage(chatId, '‚ùå Sistema temporariamente indispon√≠vel. Tente novamente em alguns minutos.');
    return;
  }
  
  try {
    bot.sendMessage(chatId, `üîê Autenticando ${email}...`);
    
    // Por enquanto, vamos simular autentica√ß√£o e buscar userId por email
    // Em produ√ß√£o, voc√™ integraria com Firebase Auth
    const userIds = await getAllFirebaseUserIds();
    
    if (userIds.length === 0) {
      bot.sendMessage(chatId, `‚ùå *Nenhuma conta encontrada*\n\nO sistema ainda n√£o possui contas cadastradas.\n\nüåê *Cadastre-se em:*\nhttps://caderninhodigital.netlify.app`);
      return;
    }
    
    // Simular login bem-sucedido com o primeiro userId encontrado
    // Em produ√ß√£o, voc√™ validaria email/senha no Firebase Auth
    const targetUserId = userIds[0]; // Por enquanto, usar o primeiro usu√°rio
    
    const success = await authenticateUser(msg.from.id, targetUserId);
    
    if (success) {
      // Salvar informa√ß√µes do usu√°rio
      const userData = userMapping.get(msg.from.id);
      userMapping.set(msg.from.id, {
        ...userData,
        email: email,
        loginMethod: 'email_password'
      });
      
      bot.sendMessage(chatId, `‚úÖ *Login realizado com sucesso!*\n\nüë§ *Conta:* ${email}\nüÜî *ID:* \`${targetUserId}\`\nüïê *Conectado em:* ${new Date().toLocaleString('pt-BR')}\n\nüéâ *Agora voc√™ pode consultar seus dados empresariais!*\n\nüí¨ *Experimente:*\n‚Ä¢ "Quanto vendi hoje?"\n‚Ä¢ "Como est√° meu estoque?"\n‚Ä¢ "Quem s√£o meus clientes?"`, { parse_mode: 'Markdown' });
    } else {
      bot.sendMessage(chatId, `‚ùå *Falha na autentica√ß√£o*\n\nüìß Email ou senha incorretos.\n\nüí° *Dicas:*\n‚Ä¢ Verifique se digitou corretamente\n‚Ä¢ Use o mesmo email do cadastro\n‚Ä¢ Caso esqueceu a senha, acesse o sistema web\n\nüåê *Recuperar senha:*\nhttps://caderninhodigital.netlify.app`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no login:', error);
    bot.sendMessage(chatId, '‚ùå Erro durante autentica√ß√£o. Tente novamente em alguns minutos.');
  }
});

// Comando /logout - desconectar da conta
bot.onText(/\/logout/, (msg) => {
  const chatId = msg.chat.id;
  const userData = userMapping.get(msg.from.id);
  
  if (userData?.isAuthenticated) {
    // Resetar para usu√°rio n√£o autenticado
    userMapping.set(msg.from.id, {
      firebaseUserId: `telegram_${msg.from.id}`,
      firstName: msg.from.first_name,
      isAuthenticated: false,
      registeredAt: new Date()
    });
    
    bot.sendMessage(chatId, `‚úÖ *Logout realizado com sucesso!*\n\nüëã Voc√™ foi desconectado da sua conta.\n\nüîê *Para conectar novamente:*\n\`/login seu@email.com suasenha\`\n\nüåê *Sistema:* https://caderninhodigital.netlify.app`);
  } else {
    bot.sendMessage(chatId, `‚ÑπÔ∏è *Voc√™ n√£o est√° conectado*\n\nüîê *Para fazer login:*\n\`/login seu@email.com suasenha\`\n\nüåê *Cadastre-se:* https://caderninhodigital.netlify.app`);
  }
});

// Comando /venda - registrar nova venda
bot.onText(/\/venda/, (msg) => {
  const chatId = msg.chat.id;
  const userData = userMapping.get(msg.from.id);
  
  if (!userData?.isAuthenticated) {
    bot.sendMessage(chatId, 'üîê *Fa√ßa login primeiro!*\n\nUse: `/login seu@email.com senha`', { parse_mode: 'Markdown' });
    return;
  }
  
  const helpMessage = `üõí *Registrar Nova Venda*

üìù *Formato:*
\`/venda [valor] [cliente] [produto]\`

üí° *Exemplos:*
\`/venda 50.00 Jo√£o Silva Camiseta\`
\`/venda 25 Maria Cal√ßa Jeans\`
\`/venda 100.50 Pedro Santos T√™nis Nike\`

üìã *Ou use o formato completo:*
\`Registrar venda de R$ 50 para Jo√£o\`
\`Venda de 25 reais produto camiseta\`

üéØ *Dica:* Voc√™ tamb√©m pode conversar naturalmente!
"Registrei uma venda de R$ 30 para a Maria"`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Comando /cliente - cadastrar cliente
bot.onText(/\/cliente/, (msg) => {
  const chatId = msg.chat.id;
  const userData = userMapping.get(msg.from.id);
  
  if (!userData?.isAuthenticated) {
    bot.sendMessage(chatId, 'üîê *Fa√ßa login primeiro!*', { parse_mode: 'Markdown' });
    return;
  }
  
  const helpMessage = `üë• *Cadastrar Novo Cliente*

üìù *Formato:*
\`/cliente [nome] [telefone] [email]\`

üí° *Exemplos:*
\`/cliente Jo√£o Silva 11999887766 joao@email.com\`
\`/cliente Maria Santos 11888776655\`
\`/cliente Pedro Costa\`

üìã *Ou converse naturalmente:*
"Cadastrar cliente Jo√£o Silva telefone 11999887766"
"Novo cliente Maria Santos"

üéØ *Campos opcionais:* telefone e email`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Comando /produto - cadastrar produto
bot.onText(/\/produto/, (msg) => {
  const chatId = msg.chat.id;
  const userData = userMapping.get(msg.from.id);
  
  if (!userData?.isAuthenticated) {
    bot.sendMessage(chatId, 'üîê *Fa√ßa login primeiro!*', { parse_mode: 'Markdown' });
    return;
  }
  
  const helpMessage = `üì¶ *Cadastrar Novo Produto*

üìù *Formato:*
\`/produto [nome] [pre√ßo] [quantidade]\`

üí° *Exemplos:*
\`/produto Camiseta 25.00 50\`
\`/produto Cal√ßa Jeans 80.50 20\`
\`/produto T√™nis Nike 150\`

üìã *Ou converse naturalmente:*
"Cadastrar produto Camiseta pre√ßo R$ 25"
"Novo produto Cal√ßa Jeans R$ 80 estoque 20"

üéØ *Campos opcionais:* quantidade (padr√£o: 0)`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Manipulador gen√©rico para mensagens de texto
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userText = msg.text;

  // Ignora comandos espec√≠ficos
  if (userText.startsWith('/')) {
    return;
  }

  const userId = getUserId(msg.from.id, msg.from.first_name);

  try {
    console.log(`üí¨ Mensagem de ${msg.from.first_name}: ${userText}`);
    
    // Enviar para Groq para an√°lise
    const groqResponse = await groq.chat.completions.create({
      messages: [{
        role: "system",
        content: `Voc√™ √© um assistente IA do "Caderninho Digital", sistema de gest√£o comercial.

PERSONALIDADE:
- Seja amig√°vel, profissional e proativo
- Use emojis apropriados
- Responda de forma clara e objetiva

FUN√á√ïES DISPON√çVEIS:
CONSULTAS:
- getSalesSummary(): vendas, faturamento, pagamentos pendentes
- getClientsSummary(): clientes, novos cadastros, top compradores  
- getProductsSummary(): estoque, produtos em falta, valor total

CADASTROS:
- registerSale(): registrar nova venda
- registerClient(): cadastrar cliente
- registerProduct(): cadastrar produto

INSTRU√á√ïES:
- Analise a pergunta/comando do usu√°rio
- Para CONSULTAS, use: "USAR_VENDAS", "USAR_CLIENTES", "USAR_PRODUTOS"
- Para CADASTROS, use: "CADASTRAR_VENDA", "CADASTRAR_CLIENTE", "CADASTRAR_PRODUTO"
- Se for pergunta geral, responda normalmente

Exemplos de CONSULTAS:
- "Quanto vendi hoje?" ‚Üí "USAR_VENDAS - Vou buscar seu faturamento!"
- "Quantos clientes tenho?" ‚Üí "USAR_CLIENTES - Verificando seus clientes!"
- "Como est√° o estoque?" ‚Üí "USAR_PRODUTOS - Analisando seu estoque!"

Exemplos de CADASTROS:
- "Registrar venda de R$ 50 para Jo√£o" ‚Üí "CADASTRAR_VENDA - Vou registrar essa venda!"
- "Cadastrar cliente Maria Silva" ‚Üí "CADASTRAR_CLIENTE - Vou cadastrar esse cliente!"
- "Adicionar produto Camiseta R$ 25" ‚Üí "CADASTRAR_PRODUTO - Vou cadastrar esse produto!"
- "Vendi 30 reais para Pedro" ‚Üí "CADASTRAR_VENDA - Registrando sua venda!"

EXTRA√á√ÉO DE DADOS:
Para cadastros, extraia:
- VENDA: valor, cliente, produto
- CLIENTE: nome, telefone, email
- PRODUTO: nome, pre√ßo, quantidade

Responda de forma conversacional e execute a a√ß√£o apropriada.`
      }, {
        role: "user",
        content: userText
      }],
      model: "llama-3.1-8b-instant",
      temperature: 0.7,
      max_tokens: 200
    });

    const aiResponse = groqResponse.choices[0]?.message?.content || "Desculpe, n√£o entendi. Pode reformular?";
    
    console.log(`ü§ñ Resposta da IA: ${aiResponse}`);

    // Processar resposta e executar a√ß√µes
    if (aiResponse.includes('USAR_VENDAS')) {
      bot.sendMessage(chatId, "üìä Buscando dados de vendas...");
      
      const summary = await getSalesSummary(userId);
      
      let response = `üìä *Resumo de Vendas*\n\n`;
      
      if (summary.isSimulated) {
        response += `‚ö†Ô∏è *Dados n√£o dispon√≠veis*\n\nPara ver dados reais:\n‚Ä¢ Acesse: https://caderninhodigital.netlify.app\n‚Ä¢ Registre suas vendas\n‚Ä¢ Volte aqui para consultar!`;
      } else if (summary.countToday === 0) {
        response += `üí∞ *Hoje:* R$ 0,00 (0 vendas)\n\nüéØ *Dica:* Que tal registrar sua primeira venda do dia?`;
      } else {
        response += `üí∞ *Hoje:* R$ ${summary.totalToday.toFixed(2)}\n`;
        response += `üõí *Vendas:* ${summary.countToday}\n`;
        response += `üìà *Ticket M√©dio:* R$ ${summary.averageTicket.toFixed(2)}\n`;
        
        if (summary.pendingPayments.length > 0) {
          response += `\nüî¥ *Pagamentos Pendentes:*\n`;
          summary.pendingPayments.slice(0, 3).forEach(p => {
            response += `‚Ä¢ ${p.clientName}: R$ ${p.remainingAmount.toFixed(2)}\n`;
          });
        }
      }
      
      bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      
    } else if (aiResponse.includes('USAR_CLIENTES')) {
      bot.sendMessage(chatId, "üë• Buscando dados de clientes...");
      
      const summary = await getClientsSummary(userId);
      
      let response = `üë• *Gest√£o de Clientes*\n\n`;
      
      if (summary.error) {
        response += `‚ùå *Erro:* ${summary.error}\n\nüîß Verifique a conex√£o com o Firebase.`;
      } else if (summary.isSimulated || summary.total === 0) {
        response += `‚ö†Ô∏è *Nenhum cliente encontrado*\n\nüéØ *Para ter dados de clientes:*\n‚Ä¢ Cadastre clientes no sistema\n‚Ä¢ Registre vendas com nome do cliente\n‚Ä¢ Use o campo "Cliente" nas vendas\n\nüí° Cadastre em: https://web-gestao-37a85.web.app`;
      } else {
        response += `üìä *Total:* ${summary.total} clientes`;
        
        if (summary.source === 'sales') {
          response += ` (extra√≠dos das vendas)`;
        }
        response += `\n`;
        
        if (summary.newThisMonth > 0) {
          response += `üÜï *Novos este m√™s:* ${summary.newThisMonth}\n`;
        }
        
        if (summary.topClients.length > 0) {
          response += `\nüèÜ *Principais Clientes:*\n`;
          summary.topClients.slice(0, 3).forEach(c => {
            response += `‚Ä¢ ${c.name}: R$ ${c.totalPurchases.toFixed(2)}\n`;
          });
        }
        
        if (summary.source === 'sales') {
          response += `\nüí° *Dica:* Cadastre clientes no sistema para ter mais controle!`;
        }
      }
      
      bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      
    } else if (aiResponse.includes('USAR_PRODUTOS')) {
      bot.sendMessage(chatId, "üì¶ Verificando estoque...");
      
      const summary = await getProductsSummary(userId);
      
      let response = `üì¶ *Controle de Estoque*\n\n`;
      
      if (summary.error) {
        response += `‚ùå *Erro:* ${summary.error}\n\nüîß Verifique a conex√£o com o Firebase.`;
      } else if (summary.isSimulated || (summary.total === 0 && summary.source === 'empty')) {
        response += `‚ö†Ô∏è *Nenhum produto encontrado*\n\nüéØ *Para ter controle de estoque:*\n‚Ä¢ Cadastre produtos no sistema\n‚Ä¢ Registre vendas com produtos\n‚Ä¢ Use o campo "Produto" nas vendas\n\nüí° Cadastre em: https://web-gestao-37a85.web.app`;
      } else {
        response += `üìä *Total:* ${summary.total} produtos`;
        
        if (summary.source === 'sales') {
          response += ` (extra√≠dos das vendas)`;
        }
        response += `\n`;
        
        response += `üí∞ *Valor total:* R$ ${summary.totalValue.toFixed(2)}\n`;
        
        if (summary.source === 'products') {
          response += `‚ö†Ô∏è *Estoque baixo:* ${summary.lowStock} produtos\n`;
          
          if (summary.productsLowStock.length > 0) {
            response += `\nüî¥ *Produtos para repor:*\n`;
            summary.productsLowStock.slice(0, 3).forEach(p => {
              response += `‚Ä¢ ${p.name}: ${p.quantity} unid.\n`;
            });
          }
        } else if (summary.source === 'sales' && summary.productsFromSales) {
          response += `\nüìà *Produtos mais vendidos:*\n`;
          summary.productsFromSales.slice(0, 3).forEach(p => {
            response += `‚Ä¢ ${p.name}: ${p.totalSold} vendidos\n`;
          });
        }
        
        if (summary.source === 'sales') {
          response += `\nüí° *Dica:* Cadastre produtos no sistema para controle de estoque!`;
        }
      }
      
      bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      
    } else if (aiResponse.includes('CADASTRAR_VENDA')) {
      // Extrair dados da venda do texto do usu√°rio
      const saleData = extractSaleData(userText);
      
      if (!saleData.total) {
        bot.sendMessage(chatId, '‚ùå *Valor da venda n√£o encontrado*\n\nüí° *Exemplos:*\n‚Ä¢ "Venda de R$ 50 para Jo√£o"\n‚Ä¢ "Registrar venda 25 reais"\n‚Ä¢ `/venda 30.00 Maria Camiseta`', { parse_mode: 'Markdown' });
        return;
      }
      
      try {
        bot.sendMessage(chatId, 'üíæ Registrando venda...');
        
        const result = await registerSale(userId, saleData);
        
        if (result.success) {
          bot.sendMessage(chatId, `‚úÖ *Venda registrada com sucesso!*\n\nüí∞ *Valor:* R$ ${saleData.total.toFixed(2)}\nüë§ *Cliente:* ${saleData.clientName}\nüì¶ *Produto:* ${saleData.productName}\nüÜî *ID:* \`${result.id}\`\n\nüéâ *Venda adicionada ao seu faturamento!*`, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå *Erro ao registrar venda:*\n\n\`${error.message}\`\n\nüîÑ Tente novamente ou use /venda para ver exemplos.`, { parse_mode: 'Markdown' });
      }
      
    } else if (aiResponse.includes('CADASTRAR_CLIENTE')) {
      // Extrair dados do cliente do texto do usu√°rio
      const clientData = extractClientData(userText);
      
      if (!clientData.name) {
        bot.sendMessage(chatId, '‚ùå *Nome do cliente n√£o encontrado*\n\nüí° *Exemplos:*\n‚Ä¢ "Cadastrar cliente Jo√£o Silva"\n‚Ä¢ "Novo cliente Maria Santos telefone 11999887766"\n‚Ä¢ `/cliente Pedro Costa`', { parse_mode: 'Markdown' });
        return;
      }
      
      try {
        bot.sendMessage(chatId, 'üíæ Cadastrando cliente...');
        
        const result = await registerClient(userId, clientData);
        
        if (result.success) {
          let response = `‚úÖ *Cliente cadastrado com sucesso!*\n\nüë§ *Nome:* ${clientData.name}`;
          if (clientData.phone) response += `\nüì± *Telefone:* ${clientData.phone}`;
          if (clientData.email) response += `\nüìß *Email:* ${clientData.email}`;
          response += `\nüÜî *ID:* \`${result.id}\`\n\nüéâ *Cliente adicionado √† sua base!*`;
          
          bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå *Erro ao cadastrar cliente:*\n\n\`${error.message}\`\n\nüîÑ Tente novamente ou use /cliente para ver exemplos.`, { parse_mode: 'Markdown' });
      }
      
    } else if (aiResponse.includes('CADASTRAR_PRODUTO')) {
      // Extrair dados do produto do texto do usu√°rio
      const productData = extractProductData(userText);
      
      if (!productData.name || !productData.price) {
        bot.sendMessage(chatId, '‚ùå *Nome ou pre√ßo do produto n√£o encontrado*\n\nüí° *Exemplos:*\n‚Ä¢ "Cadastrar produto Camiseta R$ 25"\n‚Ä¢ "Novo produto Cal√ßa Jeans pre√ßo 80 reais"\n‚Ä¢ `/produto T√™nis 150.00 10`', { parse_mode: 'Markdown' });
        return;
      }
      
      try {
        bot.sendMessage(chatId, 'üíæ Cadastrando produto...');
        
        const result = await registerProduct(userId, productData);
        
        if (result.success) {
          let response = `‚úÖ *Produto cadastrado com sucesso!*\n\nüì¶ *Nome:* ${productData.name}\nüí∞ *Pre√ßo:* R$ ${productData.price.toFixed(2)}`;
          if (productData.quantity > 0) response += `\nüìä *Estoque:* ${productData.quantity} unidades`;
          response += `\nüÜî *ID:* \`${result.id}\`\n\nüéâ *Produto adicionado ao seu cat√°logo!*`;
          
          bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå *Erro ao cadastrar produto:*\n\n\`${error.message}\`\n\nüîÑ Tente novamente ou use /produto para ver exemplos.`, { parse_mode: 'Markdown' });
      }
      
    } else {
      // Resposta geral da IA
      bot.sendMessage(chatId, aiResponse);
    }

  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem:', error);
    bot.sendMessage(chatId, '‚ùå Ops! Houve um erro. Tente novamente ou use /ajuda para ver os comandos dispon√≠veis.');
  }
});

// --- Handlers para bot√µes interativos ---
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const userId = getUserId(callbackQuery.from.id, callbackQuery.from.first_name);
  const userData = userMapping.get(callbackQuery.from.id);

  // Confirmar recebimento do callback
  await bot.answerCallbackQuery(callbackQuery.id);

  try {
    switch (data) {
      case 'help_login':
        const loginHelp = `üîê *Como fazer login no bot:*

üìß *M√©todo 1 - Email e senha:*
\`/login seu@email.com suasenha\`

üÜî *M√©todo 2 - ID direto:*
\`/login ECYMxTpm46b2iNUNU0aNHIbdfTJ2\`

üîç *M√©todo 3 - Ver contas dispon√≠veis:*
\`/usuarios\`

‚ö° *Login r√°pido (teste):*
\`/forcelogin\`

üí° *Dica:* Use o mesmo email e senha do sistema web!`;
        
        await bot.editMessageText(loginHelp, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô Voltar ao in√≠cio', callback_data: 'back_start' }]
            ]
          }
        });
        break;

      case 'list_users':
        await bot.editMessageText('üîç Verificando contas no sistema...', {
          chat_id: chatId,
          message_id: messageId
        });
        
        if (!db) {
          await bot.editMessageText('‚ùå Sistema temporariamente indispon√≠vel.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô Voltar', callback_data: 'back_start' }]
              ]
            }
          });
          break;
        }
        
        const userIds = await getAllFirebaseUserIds();
        let usersMessage = `üìä *Contas no sistema:* ${userIds.length}\n\n`;
        
        if (userIds.length === 0) {
          usersMessage += `üì≠ *Nenhuma conta encontrada*\n\nüåê *Cadastre-se primeiro:*\nhttps://web-gestao-37a85.web.app`;
        } else {
          usersMessage += `üÜî *IDs dispon√≠veis para teste:*\n`;
          userIds.slice(0, 3).forEach((id, index) => {
            usersMessage += `${index + 1}. \`${id}\`\n`;
          });
          usersMessage += `\nüí° *Teste:* \`/login ${userIds[0]}\``;
        }
        
        await bot.editMessageText(usersMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô Voltar ao in√≠cio', callback_data: 'back_start' }]
            ]
          }
        });
        break;

      case 'vendas_detalhadas':
        if (!userData?.isAuthenticated) {
          await bot.editMessageText('üîê *Fa√ßa login primeiro!*\n\nUse: `/login seu@email.com senha`', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          break;
        }
        
        await bot.editMessageText('üìä Carregando dados de vendas...', {
          chat_id: chatId,
          message_id: messageId
        });
        
        const salesSummary = await getSalesSummary(userId);
        let salesMessage = `üìä *Relat√≥rio de Vendas*\n\n`;
        
        if (salesSummary.isSimulated || salesSummary.countToday === 0) {
          salesMessage += `üí∞ *Hoje:* R$ 0,00 (0 vendas)\n\n`;
          salesMessage += `üìà *Dicas para aumentar vendas:*\n`;
          salesMessage += `‚Ä¢ Registre todas as vendas no sistema\n`;
          salesMessage += `‚Ä¢ Acompanhe o ticket m√©dio\n`;
          salesMessage += `‚Ä¢ Monitore pagamentos pendentes\n\n`;
          salesMessage += `üåê *Registrar venda:* https://web-gestao-37a85.web.app`;
        } else {
          salesMessage += `üí∞ *Hoje:* R$ ${salesSummary.totalToday.toFixed(2)}\n`;
          salesMessage += `üõí *Vendas:* ${salesSummary.countToday}\n`;
          salesMessage += `üìà *Ticket M√©dio:* R$ ${salesSummary.averageTicket.toFixed(2)}\n`;
          
          if (salesSummary.pendingPayments.length > 0) {
            salesMessage += `\nüî¥ *Pagamentos Pendentes:*\n`;
            salesSummary.pendingPayments.slice(0, 3).forEach(p => {
              salesMessage += `‚Ä¢ ${p.clientName}: R$ ${p.remainingAmount.toFixed(2)}\n`;
            });
          }
        }
        
        await bot.editMessageText(salesMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üë• Ver Clientes', callback_data: 'clientes_detalhados' },
                { text: 'üì¶ Ver Estoque', callback_data: 'estoque_detalhado' }
              ],
              [{ text: 'üîô Menu Principal', callback_data: 'back_main' }]
            ]
          }
        });
        break;

      case 'clientes_detalhados':
        if (!userData?.isAuthenticated) {
          await bot.editMessageText('üîê *Fa√ßa login primeiro!*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          break;
        }
        
        await bot.editMessageText('üë• Carregando dados de clientes...', {
          chat_id: chatId,
          message_id: messageId
        });
        
        const clientsSummary = await getClientsSummary(userId);
        let clientsMessage = `üë• *Gest√£o de Clientes*\n\n`;
        
        if (clientsSummary.isSimulated || clientsSummary.total === 0) {
          clientsMessage += `üìä *Total:* 0 clientes\n\n`;
          clientsMessage += `üéØ *Benef√≠cios de cadastrar clientes:*\n`;
          clientsMessage += `‚Ä¢ Vendas fiado organizadas\n`;
          clientsMessage += `‚Ä¢ Hist√≥rico de compras\n`;
          clientsMessage += `‚Ä¢ Controle de pagamentos\n\n`;
          clientsMessage += `üí° *Cadastre em:* https://web-gestao-37a85.web.app`;
        } else {
          clientsMessage += `üìä *Total:* ${clientsSummary.total} clientes\n`;
          clientsMessage += `üÜï *Novos este m√™s:* ${clientsSummary.newThisMonth}\n`;
          
          if (clientsSummary.topClients.length > 0) {
            clientsMessage += `\nüèÜ *Top Clientes:*\n`;
            clientsSummary.topClients.slice(0, 3).forEach(c => {
              clientsMessage += `‚Ä¢ ${c.name}: R$ ${c.totalPurchases.toFixed(2)}\n`;
            });
          }
        }
        
        await bot.editMessageText(clientsMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä Ver Vendas', callback_data: 'vendas_detalhadas' },
                { text: 'üì¶ Ver Estoque', callback_data: 'estoque_detalhado' }
              ],
              [{ text: 'üîô Menu Principal', callback_data: 'back_main' }]
            ]
          }
        });
        break;

      case 'estoque_detalhado':
        if (!userData?.isAuthenticated) {
          await bot.editMessageText('üîê *Fa√ßa login primeiro!*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          break;
        }
        
        await bot.editMessageText('üì¶ Verificando estoque...', {
          chat_id: chatId,
          message_id: messageId
        });
        
        const productsSummary = await getProductsSummary(userId);
        let productsMessage = `üì¶ *Controle de Estoque*\n\n`;
        
        if (productsSummary.isSimulated || productsSummary.total === 0) {
          productsMessage += `üìä *Total:* 0 produtos\n\n`;
          productsMessage += `üéØ *Benef√≠cios do controle de estoque:*\n`;
          productsMessage += `‚Ä¢ Evitar produtos em falta\n`;
          productsMessage += `‚Ä¢ Alertas de reposi√ß√£o\n`;
          productsMessage += `‚Ä¢ Gest√£o de custos\n\n`;
          productsMessage += `üí° *Cadastre em:* https://web-gestao-37a85.web.app`;
        } else {
          productsMessage += `üìä *Total:* ${productsSummary.total} produtos\n`;
          productsMessage += `üí∞ *Valor do estoque:* R$ ${productsSummary.totalValue.toFixed(2)}\n`;
          productsMessage += `‚ö†Ô∏è *Estoque baixo:* ${productsSummary.lowStock} produtos\n`;
          
          if (productsSummary.productsLowStock.length > 0) {
            productsMessage += `\nüî¥ *Produtos para repor:*\n`;
            productsSummary.productsLowStock.slice(0, 3).forEach(p => {
              productsMessage += `‚Ä¢ ${p.name}: ${p.quantity} unid.\n`;
            });
          }
        }
        
        await bot.editMessageText(productsMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä Ver Vendas', callback_data: 'vendas_detalhadas' },
                { text: 'üë• Ver Clientes', callback_data: 'clientes_detalhados' }
              ],
              [{ text: 'üîô Menu Principal', callback_data: 'back_main' }]
            ]
          }
        });
        break;

      case 'logout_confirm':
        const logoutMessage = `üîê *Confirmar Logout*\n\nTem certeza que deseja sair da sua conta?\n\n‚ö†Ô∏è *Voc√™ precisar√° fazer login novamente para acessar seus dados.*`;
        
        await bot.editMessageText(logoutMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ Sim, sair', callback_data: 'logout_confirm_yes' },
                { text: '‚ùå Cancelar', callback_data: 'back_main' }
              ]
            ]
          }
        });
        break;

      case 'logout_confirm_yes':
        // Resetar para usu√°rio n√£o autenticado
        userMapping.set(callbackQuery.from.id, {
          firebaseUserId: `telegram_${callbackQuery.from.id}`,
          firstName: callbackQuery.from.first_name,
          isAuthenticated: false,
          registeredAt: new Date()
        });
        
        await bot.editMessageText(`‚úÖ *Logout realizado!*\n\nüëã Voc√™ foi desconectado da sua conta.\n\nüîê *Para conectar novamente:*\n\`/login seu@email.com suasenha\``, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîê Fazer Login', callback_data: 'help_login' }]
            ]
          }
        });
        break;

      case 'back_start':
        // Voltar para a mensagem inicial
        const startMessage = `üéâ *Ol√°, ${callbackQuery.from.first_name}!*

ü§ñ *Caderninho Digital - Assistente IA*
üíº *Chatbot P√öBLICO para empres√°rios*

üîê *FA√áA LOGIN COM SUA CONTA:*

üìß *Login com email e senha:*
\`/login seu@email.com suasenha\`

üÜî *Login direto com ID:*
\`/login seu_user_id\`

‚ùì *N√£o tem conta empresarial?*
üåê *Cadastre-se GR√ÅTIS:* https://web-gestao-37a85.web.app

üë• *Este bot √© p√∫blico - compartilhe com outros empres√°rios!*`;

        await bot.editMessageText(startMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîê Como fazer login?', callback_data: 'help_login' },
                { text: 'üìã Ver contas dispon√≠veis', callback_data: 'list_users' }
              ],
              [
                { text: '‚ùì Ajuda completa', callback_data: 'ajuda_completa' },
                { text: 'üåê Acessar sistema', callback_data: 'open_system' }
              ]
            ]
          }
        });
        break;

      case 'back_main':
        if (!userData?.isAuthenticated) {
          await bot.editMessageText('üîê *Fa√ßa login primeiro!*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          break;
        }
        
        const mainMessage = `üëã *Menu Principal*

‚úÖ *Conectado como:* ${userData.firstName}
üÜî *ID:* \`${userData.firebaseUserId}\`

üí¨ *Escolha uma op√ß√£o ou converse naturalmente:*`;

        await bot.editMessageText(mainMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä Ver Vendas', callback_data: 'vendas_detalhadas' },
                { text: 'üë• Ver Clientes', callback_data: 'clientes_detalhados' }
              ],
              [
                { text: 'üì¶ Ver Estoque', callback_data: 'estoque_detalhado' },
                { text: 'üõí Nova Venda', callback_data: 'nova_venda' }
              ],
              [
                { text: 'üë§ Novo Cliente', callback_data: 'novo_cliente' },
                { text: 'üì¶ Novo Produto', callback_data: 'novo_produto' }
              ],
              [
                { text: 'üîÑ Trocar Conta', callback_data: 'logout_confirm' }
              ]
            ]
          }
        });
        break;

      case 'ajuda_completa':
        const helpMessage = `‚ùì *Central de Ajuda*

üîê *Como conectar:*
\`/login seu@email.com senha\`
\`/login userID\` (direto)

üìä *Comandos:*
/start - Menu inicial
/ajuda - Esta ajuda  
/status - Status da conex√£o
/usuarios - Ver contas (admin)
/forcelogin - Login r√°pido

üí¨ *Perguntas que entendo:*
‚Ä¢ "Quanto vendi hoje?"
‚Ä¢ "Quantos clientes tenho?"
‚Ä¢ "Produtos acabando?"
‚Ä¢ "Quem est√° devendo?"

ü§ñ *IA Conversacional:*
Converse naturalmente! Entendo perguntas sobre seu neg√≥cio.`;

        await bot.editMessageText(helpMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô Voltar ao in√≠cio', callback_data: 'back_start' }]
            ]
          }
        });
        break;

      case 'open_system':
        await bot.editMessageText(`üåê *Acessar Sistema Web*\n\nüîó *Link:* https://web-gestao-37a85.web.app\n\nüì± *Funcionalidades:*\n‚Ä¢ Cadastro de produtos\n‚Ä¢ Registro de vendas\n‚Ä¢ Gest√£o de clientes\n‚Ä¢ Relat√≥rios completos\n\nüí° *Ap√≥s cadastrar dados, volte aqui para consultar via bot!*`, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô Voltar ao in√≠cio', callback_data: 'back_start' }]
            ]
          }
        });
        break;

      case 'nova_venda':
        if (!userData?.isAuthenticated) {
          await bot.editMessageText('üîê *Fa√ßa login primeiro!*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          break;
        }
        
        const vendaMessage = `üõí *Registrar Nova Venda*\n\nüí¨ *Digite naturalmente:*\n‚Ä¢ "Venda de R$ 50 para Jo√£o"\n‚Ä¢ "Registrar venda 25 reais cliente Maria"\n‚Ä¢ "Vendi 30 para Pedro produto Camiseta"\n\nüìù *Ou use o comando:*\n\`/venda 50.00 Jo√£o Silva Camiseta\`\n\nüí° *Dica:* Apenas digite sua mensagem que eu entendo!`;
        
        await bot.editMessageText(vendaMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô Menu Principal', callback_data: 'back_main' }]
            ]
          }
        });
        break;

      case 'novo_cliente':
        if (!userData?.isAuthenticated) {
          await bot.editMessageText('üîê *Fa√ßa login primeiro!*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          break;
        }
        
        const clienteMessage = `üë• *Cadastrar Novo Cliente*\n\nüí¨ *Digite naturalmente:*\n‚Ä¢ "Cadastrar cliente Jo√£o Silva"\n‚Ä¢ "Novo cliente Maria telefone 11999887766"\n‚Ä¢ "Cliente Pedro email pedro@email.com"\n\nüìù *Ou use o comando:*\n\`/cliente Jo√£o Silva 11999887766 joao@email.com\`\n\nüí° *Campos opcionais:* telefone e email`;
        
        await bot.editMessageText(clienteMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô Menu Principal', callback_data: 'back_main' }]
            ]
          }
        });
        break;

      case 'novo_produto':
        if (!userData?.isAuthenticated) {
          await bot.editMessageText('üîê *Fa√ßa login primeiro!*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          break;
        }
        
        const produtoMessage = `üì¶ *Cadastrar Novo Produto*\n\nüí¨ *Digite naturalmente:*\n‚Ä¢ "Cadastrar produto Camiseta R$ 25"\n‚Ä¢ "Novo produto Cal√ßa pre√ßo 80 reais"\n‚Ä¢ "Produto T√™nis 150 estoque 10"\n\nüìù *Ou use o comando:*\n\`/produto Camiseta 25.00 50\`\n\nüí° *Campos opcionais:* quantidade em estoque`;
        
        await bot.editMessageText(produtoMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô Menu Principal', callback_data: 'back_main' }]
            ]
          }
        });
        break;

      default:
        await bot.editMessageText('‚ùì Op√ß√£o n√£o reconhecida. Use /start para voltar ao menu.', {
          chat_id: chatId,
          message_id: messageId
        });
    }
  } catch (error) {
    console.error('‚ùå Erro no callback:', error);
    await bot.sendMessage(chatId, '‚ùå Erro ao processar a√ß√£o. Tente novamente com /start');
  }
});

// Tratamento de erros do bot
bot.on('polling_error', (error) => {
  console.error('‚ùå Erro de polling:', error.code);
});

// Servidor Express para health check e webhook
const app = express();
app.use(express.json());

app.get('/', (req, res) => {
  res.json({
    status: 'online',
    service: 'Caderninho Digital Chatbot IA',
    timestamp: new Date().toISOString(),
    firebase: !!db,
    groq: !!GROQ_API_KEY,
    environment: process.env.NODE_ENV || 'development'
  });
});

// Webhook endpoint para produ√ß√£o
app.post('/webhook', (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error('‚ùå Erro no webhook:', error);
    res.sendStatus(500);
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ Servidor rodando na porta ${PORT}`);
});

console.log('‚úÖ Caderninho Digital Chatbot IA inicializado!');
console.log('üì± Bot pronto para receber mensagens no Telegram');
console.log('üîó Sistema: https://caderninhodigital.netlify.app');