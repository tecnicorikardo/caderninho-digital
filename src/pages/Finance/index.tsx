import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import toast from 'react-hot-toast';

interface Transaction {
  id: string;
  type: 'receita' | 'despesa';
  category: string;
  description: string;
  amount: number;
  date: Date;
  paymentMethod: 'dinheiro' | 'pix' | 'cartao' | 'transferencia';
  status: 'pago' | 'pendente';
  userId: string;
  createdAt: Date;
  financialType: 'comercial' | 'pessoal'; // Nova propriedade
}

// Categorias Comerciais
const RECEITA_COMERCIAL_CATEGORIES = [
  'Vendas', 'Servi√ßos', 'Comiss√µes', 'Outros'
];

const DESPESA_COMERCIAL_CATEGORIES = [
  'Fornecedores', 'Aluguel Loja', 'Energia Comercial', 'Internet Loja', 
  'Marketing', 'Funcion√°rios', 'Impostos', 'Material', 'Manuten√ß√£o', 'Outros'
];

// Categorias Pessoais
const RECEITA_PESSOAL_CATEGORIES = [
  'Sal√°rio', 'Freelance', 'Investimentos', 'Aluguel', 'Pens√£o', 'Outros'
];

const DESPESA_PESSOAL_CATEGORIES = [
  'Alimenta√ß√£o', 'Transporte', 'Moradia', 'Sa√∫de', 'Educa√ß√£o', 
  'Lazer', 'Roupas', 'Telefone', 'Internet', 'Outros'
];

export function Finance() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);
  const [activeTab, setActiveTab] = useState<'overview' | 'comercial' | 'pessoal' | 'relatorio'>('overview');
  const [activeFinancialType, setActiveFinancialType] = useState<'comercial' | 'pessoal'>('comercial');
  
  const [formData, setFormData] = useState({
    type: 'receita' as 'receita' | 'despesa',
    category: '',
    description: '',
    amount: 0,
    date: new Date().toISOString().split('T')[0],
    paymentMethod: 'dinheiro' as 'dinheiro' | 'pix' | 'cartao' | 'transferencia',
    status: 'pago' as 'pago' | 'pendente',
    financialType: 'pessoal' as 'comercial' | 'pessoal'
  });

  useEffect(() => {
    loadTransactions();
    syncSalesAsRevenue();
  }, []);

  const loadTransactions = async () => {
    if (!user) {
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      
      const savedTransactions = localStorage.getItem(`transactions_${user.uid}`);
      if (savedTransactions) {
        let parsedTransactions = JSON.parse(savedTransactions).map((transaction: any) => ({
          ...transaction,
          date: new Date(transaction.date),
          createdAt: new Date(transaction.createdAt),
          // Migra√ß√£o: adicionar financialType para transa√ß√µes antigas
          financialType: transaction.financialType || 
                        (transaction.autoGenerated ? 'comercial' : 'pessoal')
        }));
        
        // Salvar as transa√ß√µes migradas
        localStorage.setItem(`transactions_${user.uid}`, JSON.stringify(parsedTransactions));
        
        setTransactions(parsedTransactions);
      }
    } catch (error) {
      toast.error('Erro ao carregar transa√ß√µes');
      console.error('Erro:', error);
    } finally {
      setLoading(false);
    }
  };

  const syncSalesAsRevenue = async () => {
    if (!user) return;

    try {
      console.log('üîÑ Sincronizando vendas com financeiro...');
      
      // Carregar vendas do Firebase
      let sales: any[] = [];
      try {
        const { collection, query, where, getDocs } = await import('firebase/firestore');
        const { db } = await import('../../config/firebase');
        
        const salesQuery = query(collection(db, 'sales'), where('userId', '==', user.uid));
        const salesSnapshot = await getDocs(salesQuery);
        
        sales = salesSnapshot.docs.map(doc => {
          const data = doc.data();
          return {
            id: doc.id,
            ...data,
            createdAt: data.createdAt?.toDate() || new Date(),
          };
        });
        
        console.log(`‚úÖ ${sales.length} vendas encontradas no Firebase`);
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao carregar vendas do Firebase:', error);
        return;
      }

      // Carregar transa√ß√µes existentes
      const savedTransactions = localStorage.getItem(`transactions_${user.uid}`);
      let existingTransactions = savedTransactions ? JSON.parse(savedTransactions) : [];
      
      // Identificar vendas que ainda n√£o foram sincronizadas
      const syncedSaleIds = existingTransactions
        .filter((t: any) => t.autoGenerated && t.saleId)
        .map((t: any) => t.saleId);
      
      const unsyncedSales = sales.filter(sale => !syncedSaleIds.includes(sale.id));
      
      console.log(`üìä ${unsyncedSales.length} vendas n√£o sincronizadas encontradas`);
      
      if (unsyncedSales.length === 0) {
        console.log('‚úÖ Todas as vendas j√° est√£o sincronizadas');
        return;
      }

      // Criar transa√ß√µes de receita para vendas n√£o sincronizadas
      const newTransactions = unsyncedSales.map(sale => {
        const saleValue = sale.paidAmount || sale.total || 0;
        const clientName = sale.clientName || 'Cliente Avulso';
        
        return {
          id: `sale_${sale.id}_${Date.now()}`,
          type: 'receita',
          category: 'Vendas',
          description: `Venda - ${clientName}`,
          amount: saleValue,
          date: sale.createdAt.toISOString ? sale.createdAt.toISOString() : new Date(sale.createdAt).toISOString(),
          paymentMethod: sale.paymentMethod === 'dinheiro' ? 'dinheiro' : 
                       sale.paymentMethod === 'pix' ? 'pix' : 'dinheiro',
          status: 'pago',
          userId: user.uid,
          createdAt: new Date().toISOString(),
          autoGenerated: true,
          saleId: sale.id,
          financialType: 'comercial' // Vendas sempre s√£o comerciais
        };
      });

      // Salvar as novas transa√ß√µes
      const updatedTransactions = [...existingTransactions, ...newTransactions];
      localStorage.setItem(`transactions_${user.uid}`, JSON.stringify(updatedTransactions));
      
      console.log(`‚úÖ ${newTransactions.length} receitas sincronizadas com sucesso`);
      
      // Recarregar transa√ß√µes para atualizar a interface
      loadTransactions();
      
      if (newTransactions.length > 0) {
        toast.success(`${newTransactions.length} vendas sincronizadas como receitas!`);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar vendas:', error);
    }
  };

  const handleCreateTransaction = (type: 'receita' | 'despesa', financialType: 'comercial' | 'pessoal' = 'pessoal') => {
    setEditingTransaction(null);
    setFormData({
      type,
      category: '',
      description: '',
      amount: 0,
      date: new Date().toISOString().split('T')[0],
      paymentMethod: 'dinheiro',
      status: 'pago',
      financialType
    });
    setShowForm(true);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;

    if (!formData.category || !formData.description || formData.amount <= 0) {
      toast.error('Preencha todos os campos obrigat√≥rios');
      return;
    }

    try {
      const savedTransactions = localStorage.getItem(`transactions_${user.uid}`);
      let transactionsList = savedTransactions ? JSON.parse(savedTransactions) : [];
      
      if (editingTransaction) {
        transactionsList = transactionsList.map((transaction: any) => 
          transaction.id === editingTransaction.id 
            ? { 
                ...transaction, 
                ...formData, 
                date: new Date(formData.date).toISOString(),
                updatedAt: new Date().toISOString() 
              }
            : transaction
        );
        toast.success('Transa√ß√£o atualizada com sucesso!');
      } else {
        const newTransaction = {
          id: Date.now().toString(),
          ...formData,
          date: new Date(formData.date).toISOString(),
          createdAt: new Date().toISOString(),
          userId: user.uid,
          financialType: formData.financialType
        };
        transactionsList.push(newTransaction);
        toast.success('Transa√ß√£o criada com sucesso!');
      }
      
      localStorage.setItem(`transactions_${user.uid}`, JSON.stringify(transactionsList));
      
      setShowForm(false);
      loadTransactions();
    } catch (error) {
      toast.error('Erro ao salvar transa√ß√£o');
      console.error('Erro:', error);
    }
  };

  const handleDeleteTransaction = async (transactionId: string) => {
    if (!confirm('Tem certeza que deseja excluir esta transa√ß√£o?')) return;

    try {
      const savedTransactions = localStorage.getItem(`transactions_${user?.uid}`);
      if (savedTransactions) {
        const transactionsList = JSON.parse(savedTransactions);
        const filteredTransactions = transactionsList.filter((transaction: any) => transaction.id !== transactionId);
        localStorage.setItem(`transactions_${user?.uid}`, JSON.stringify(filteredTransactions));
      }
      
      toast.success('Transa√ß√£o exclu√≠da com sucesso!');
      loadTransactions();
    } catch (error) {
      toast.error('Erro ao excluir transa√ß√£o');
    }
  };

  const handleEditTransaction = (transaction: Transaction) => {
    setEditingTransaction(transaction);
    setFormData({
      type: transaction.type,
      category: transaction.category,
      description: transaction.description,
      amount: transaction.amount,
      date: transaction.date.toISOString().split('T')[0],
      paymentMethod: transaction.paymentMethod,
      status: transaction.status,
      financialType: transaction.financialType
    });
    setShowForm(true);
  };

  const handleToggleStatus = async (transactionId: string) => {
    if (!user) return;

    try {
      const savedTransactions = localStorage.getItem(`transactions_${user.uid}`);
      if (savedTransactions) {
        const transactionsList = JSON.parse(savedTransactions);
        const updatedTransactions = transactionsList.map((transaction: any) => {
          if (transaction.id === transactionId) {
            const newStatus = transaction.status === 'pago' ? 'pendente' : 'pago';
            toast.success(`Transa√ß√£o marcada como ${newStatus}!`);
            return { 
              ...transaction, 
              status: newStatus,
              updatedAt: new Date().toISOString() 
            };
          }
          return transaction;
        });
        
        localStorage.setItem(`transactions_${user.uid}`, JSON.stringify(updatedTransactions));
        loadTransactions();
      }
    } catch (error) {
      toast.error('Erro ao atualizar status');
      console.error('Erro:', error);
    }
  };

  const getSummary = () => {
    // Resumo Geral
    const receitas = transactions.filter(t => t.type === 'receita');
    const despesas = transactions.filter(t => t.type === 'despesa');

    const totalReceitas = receitas.reduce((sum, t) => t.status === 'pago' ? sum + t.amount : sum, 0);
    const totalDespesas = despesas.reduce((sum, t) => t.status === 'pago' ? sum + t.amount : sum, 0);
    const receitasPendentes = receitas.reduce((sum, t) => t.status === 'pendente' ? sum + t.amount : sum, 0);
    const despesasPendentes = despesas.reduce((sum, t) => t.status === 'pendente' ? sum + t.amount : sum, 0);

    // Resumo Comercial
    const receitasComerciais = transactions.filter(t => t.type === 'receita' && t.financialType === 'comercial');
    const despesasComerciais = transactions.filter(t => t.type === 'despesa' && t.financialType === 'comercial');
    
    const totalReceitasComerciais = receitasComerciais.reduce((sum, t) => t.status === 'pago' ? sum + t.amount : sum, 0);
    const totalDespesasComerciais = despesasComerciais.reduce((sum, t) => t.status === 'pago' ? sum + t.amount : sum, 0);

    // Resumo Pessoal
    const receitasPessoais = transactions.filter(t => t.type === 'receita' && t.financialType === 'pessoal');
    const despesasPessoais = transactions.filter(t => t.type === 'despesa' && t.financialType === 'pessoal');
    
    const totalReceitasPessoais = receitasPessoais.reduce((sum, t) => t.status === 'pago' ? sum + t.amount : sum, 0);
    const totalDespesasPessoais = despesasPessoais.reduce((sum, t) => t.status === 'pago' ? sum + t.amount : sum, 0);

    return {
      // Geral
      totalReceitas,
      totalDespesas,
      saldoLiquido: totalReceitas - totalDespesas,
      receitasPendentes,
      despesasPendentes,
      
      // Comercial
      totalReceitasComerciais,
      totalDespesasComerciais,
      saldoComercial: totalReceitasComerciais - totalDespesasComerciais,
      
      // Pessoal
      totalReceitasPessoais,
      totalDespesasPessoais,
      saldoPessoal: totalReceitasPessoais - totalDespesasPessoais
    };
  };

  const summary = getSummary();

  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        minHeight: '400px' 
      }}>
        <div>Carregando dados financeiros...</div>
      </div>
    );
  }

  return (
    <div style={{ padding: '20px' }}>
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '2rem'
      }}>
        <div>
          <h1>üí∞ Gest√£o Financeira</h1>
          <button
            onClick={() => navigate('/')}
            style={{
              padding: '0.5rem 1rem',
              backgroundColor: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              cursor: 'pointer',
              marginTop: '0.5rem'
            }}
          >
            ‚Üê Voltar ao Dashboard
          </button>
        </div>
        
        <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap', alignItems: 'center' }}>
          <button
            onClick={syncSalesAsRevenue}
            style={{
              padding: '0.75rem 1.5rem',
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontWeight: '500',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}
          >
            üîÑ Sincronizar Vendas
          </button>
          
          <div style={{ 
            display: 'flex', 
            gap: '0.5rem', 
            padding: '0.5rem',
            backgroundColor: '#f8f9fa',
            borderRadius: '8px',
            border: '1px solid #e1e5e9'
          }}>
            <span style={{ fontSize: '0.9rem', fontWeight: '500', color: '#666' }}>Comercial:</span>
            <button
              onClick={() => handleCreateTransaction('receita', 'comercial')}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: '#28a745',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '0.9rem'
              }}
            >
              + Receita
            </button>
            <button
              onClick={() => handleCreateTransaction('despesa', 'comercial')}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: '#dc3545',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '0.9rem'
              }}
            >
              + Despesa
            </button>
          </div>

          <div style={{ 
            display: 'flex', 
            gap: '0.5rem', 
            padding: '0.5rem',
            backgroundColor: '#f0f8ff',
            borderRadius: '8px',
            border: '1px solid #007bff'
          }}>
            <span style={{ fontSize: '0.9rem', fontWeight: '500', color: '#007bff' }}>Pessoal:</span>
            <button
              onClick={() => handleCreateTransaction('receita', 'pessoal')}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: '#28a745',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '0.9rem'
              }}
            >
              + Receita
            </button>
            <button
              onClick={() => handleCreateTransaction('despesa', 'pessoal')}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: '#dc3545',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '0.9rem'
              }}
            >
              + Despesa
            </button>
          </div>
        </div>
      </div>

      {/* Informa√ß√£o sobre Sincroniza√ß√£o */}
      <div className="card" style={{
        backgroundColor: 'rgba(0, 123, 255, 0.05)',
        marginBottom: '2rem',
        border: '1px solid rgba(0, 123, 255, 0.2)'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem', marginBottom: '0.75rem' }}>
          <div style={{
            width: '40px',
            height: '40px',
            backgroundColor: 'var(--primary-color)',
            borderRadius: '10px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '20px',
            color: 'white'
          }}>
            üîÑ
          </div>
          <div>
            <strong style={{ color: '#1976d2', fontSize: '1.1rem' }}>Sincroniza√ß√£o com Vendas</strong>
            <div style={{ fontSize: '0.9rem', color: '#666', marginTop: '0.25rem' }}>
              Suas vendas s√£o automaticamente convertidas em receitas
            </div>
          </div>
        </div>
        <div style={{ fontSize: '0.95rem', color: '#1976d2', lineHeight: '1.5' }}>
          ‚Ä¢ Clique em "üîÑ Sincronizar Vendas" para importar vendas n√£o sincronizadas<br/>
          ‚Ä¢ Transa√ß√µes marcadas com <span style={{
            padding: '0.2rem 0.5rem',
            backgroundColor: '#007bff',
            color: 'white',
            borderRadius: '12px',
            fontSize: '0.8rem',
            fontWeight: 'bold'
          }}>üîÑ AUTO</span> foram geradas automaticamente<br/>
          ‚Ä¢ A sincroniza√ß√£o acontece automaticamente ao abrir esta p√°gina
        </div>
      </div>

      {/* Resumo Financeiro Geral */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
        gap: '1rem',
        marginBottom: '2rem'
      }}>
        <div className="card" style={{
          textAlign: 'center',
          border: '2px solid var(--success-color)'
        }}>
          <h3 style={{ margin: '0 0 0.5rem 0', color: 'var(--success-color)' }}>üìà Receitas Totais</h3>
          <p style={{ margin: 0, fontSize: '2rem', fontWeight: 'bold', color: 'var(--success-color)' }}>
            R$ {summary.totalReceitas.toFixed(2)}
          </p>
          {summary.receitasPendentes > 0 && (
            <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', color: 'var(--warning-color)' }}>
              Pendente: R$ {summary.receitasPendentes.toFixed(2)}
            </p>
          )}
        </div>

        <div className="card" style={{
          textAlign: 'center',
          border: '2px solid var(--danger-color)'
        }}>
          <h3 style={{ margin: '0 0 0.5rem 0', color: 'var(--danger-color)' }}>üìâ Despesas Totais</h3>
          <p style={{ margin: 0, fontSize: '2rem', fontWeight: 'bold', color: 'var(--danger-color)' }}>
            R$ {summary.totalDespesas.toFixed(2)}
          </p>
          {summary.despesasPendentes > 0 && (
            <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', color: 'var(--warning-color)' }}>
              Pendente: R$ {summary.despesasPendentes.toFixed(2)}
            </p>
          )}
        </div>

        <div className="card" style={{
          textAlign: 'center',
          border: `2px solid ${summary.saldoLiquido >= 0 ? 'var(--primary-color)' : 'var(--danger-color)'}`
        }}>
          <h3 style={{ margin: '0 0 0.5rem 0', color: summary.saldoLiquido >= 0 ? 'var(--primary-color)' : 'var(--danger-color)' }}>
            üí∞ Saldo L√≠quido Total
          </h3>
          <p style={{ 
            margin: 0, 
            fontSize: '2rem', 
            fontWeight: 'bold', 
            color: summary.saldoLiquido >= 0 ? 'var(--primary-color)' : 'var(--danger-color)' 
          }}>
            R$ {summary.saldoLiquido.toFixed(2)}
          </p>
        </div>
      </div>

      {/* Resumos Separados - Comercial e Pessoal */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem', marginBottom: '2rem' }}>
        {/* Financeiro Comercial */}
        <div className="card" style={{ border: '2px solid #6c757d' }}>
          <h3 style={{ margin: '0 0 1rem 0', color: '#6c757d', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            üè™ Financeiro Comercial
          </h3>
          <div style={{ display: 'grid', gap: '0.75rem' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ color: '#28a745' }}>üìà Receitas:</span>
              <span style={{ fontWeight: 'bold', color: '#28a745' }}>
                R$ {summary.totalReceitasComerciais.toFixed(2)}
              </span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ color: '#dc3545' }}>üìâ Despesas:</span>
              <span style={{ fontWeight: 'bold', color: '#dc3545' }}>
                R$ {summary.totalDespesasComerciais.toFixed(2)}
              </span>
            </div>
            <hr style={{ margin: '0.5rem 0' }} />
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontWeight: 'bold' }}>üí∞ Lucro:</span>
              <span style={{ 
                fontWeight: 'bold', 
                fontSize: '1.2rem',
                color: summary.saldoComercial >= 0 ? '#28a745' : '#dc3545' 
              }}>
                R$ {summary.saldoComercial.toFixed(2)}
              </span>
            </div>
          </div>
        </div>

        {/* Financeiro Pessoal */}
        <div className="card" style={{ border: '2px solid #007bff' }}>
          <h3 style={{ margin: '0 0 1rem 0', color: '#007bff', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            üë§ Financeiro Pessoal
          </h3>
          <div style={{ display: 'grid', gap: '0.75rem' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ color: '#28a745' }}>üìà Receitas:</span>
              <span style={{ fontWeight: 'bold', color: '#28a745' }}>
                R$ {summary.totalReceitasPessoais.toFixed(2)}
              </span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ color: '#dc3545' }}>üìâ Despesas:</span>
              <span style={{ fontWeight: 'bold', color: '#dc3545' }}>
                R$ {summary.totalDespesasPessoais.toFixed(2)}
              </span>
            </div>
            <hr style={{ margin: '0.5rem 0' }} />
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <span style={{ fontWeight: 'bold' }}>üí∞ Saldo:</span>
              <span style={{ 
                fontWeight: 'bold', 
                fontSize: '1.2rem',
                color: summary.saldoPessoal >= 0 ? '#28a745' : '#dc3545' 
              }}>
                R$ {summary.saldoPessoal.toFixed(2)}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Abas de Navega√ß√£o */}
      <div style={{ marginBottom: '2rem' }}>
        <div style={{ display: 'flex', gap: '1rem', borderBottom: '2px solid #e1e5e9' }}>
          {[
            { key: 'overview', label: 'üìä Vis√£o Geral' },
            { key: 'comercial', label: 'üè™ Comercial' },
            { key: 'pessoal', label: 'üë§ Pessoal' },
            { key: 'relatorio', label: 'üìã Relat√≥rios' }
          ].map(tab => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key as any)}
              style={{
                padding: '0.75rem 1.5rem',
                backgroundColor: activeTab === tab.key ? 'var(--primary-color)' : 'transparent',
                color: activeTab === tab.key ? 'white' : 'var(--primary-color)',
                border: 'none',
                borderRadius: '8px 8px 0 0',
                cursor: 'pointer',
                fontWeight: '500',
                transition: 'all 0.2s ease'
              }}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Formul√°rio de Transa√ß√£o */}
      {showForm && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.5)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000,
          overflow: 'auto'
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '2rem',
            borderRadius: '12px',
            width: '90%',
            maxWidth: '500px',
            maxHeight: '90vh',
            overflow: 'auto'
          }}>
            <h2 style={{ marginBottom: '1.5rem' }}>
              {editingTransaction ? 'Editar' : 'Nova'} {formData.type === 'receita' ? 'Receita' : 'Despesa'}
            </h2>

            <form onSubmit={handleSubmit}>
              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  Tipo Financeiro *
                </label>
                <select
                  value={formData.financialType}
                  onChange={(e) => setFormData(prev => ({ 
                    ...prev, 
                    financialType: e.target.value as 'comercial' | 'pessoal',
                    category: '' // Reset category when changing type
                  }))}
                  required
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '2px solid #e1e5e9',
                    borderRadius: '8px',
                    fontSize: '1rem'
                  }}
                >
                  <option value="pessoal">üë§ Pessoal</option>
                  <option value="comercial">üè™ Comercial</option>
                </select>
              </div>

              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  Categoria *
                </label>
                <select
                  value={formData.category}
                  onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
                  required
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '2px solid #e1e5e9',
                    borderRadius: '8px',
                    fontSize: '1rem'
                  }}
                >
                  <option value="">Selecione uma categoria</option>
                  {(() => {
                    if (formData.type === 'receita' && formData.financialType === 'comercial') {
                      return RECEITA_COMERCIAL_CATEGORIES;
                    } else if (formData.type === 'receita' && formData.financialType === 'pessoal') {
                      return RECEITA_PESSOAL_CATEGORIES;
                    } else if (formData.type === 'despesa' && formData.financialType === 'comercial') {
                      return DESPESA_COMERCIAL_CATEGORIES;
                    } else {
                      return DESPESA_PESSOAL_CATEGORIES;
                    }
                  })().map(category => (
                    <option key={category} value={category}>{category}</option>
                  ))}
                </select>
              </div>

              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                  Descri√ß√£o *
                </label>
                <input
                  type="text"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  required
                  placeholder="Descreva a transa√ß√£o"
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '2px solid #e1e5e9',
                    borderRadius: '8px',
                    fontSize: '1rem'
                  }}
                />
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1rem' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                    Valor (R$) *
                  </label>
                  <input
                    type="number"
                    value={formData.amount === 0 ? '' : formData.amount}
                    onChange={(e) => {
                      const value = e.target.value;
                      if (value === '') {
                        setFormData(prev => ({ ...prev, amount: 0 }));
                      } else {
                        const numValue = parseFloat(value);
                        if (!isNaN(numValue) && numValue >= 0) {
                          setFormData(prev => ({ ...prev, amount: numValue }));
                        }
                      }
                    }}
                    min="0"
                    step="0.01"
                    placeholder="0.00"
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px'
                    }}
                  />
                </div>
                
                <div>
                  <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                    Data *
                  </label>
                  <input
                    type="date"
                    value={formData.date}
                    onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px'
                    }}
                  />
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '2rem' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                    Forma de Pagamento
                  </label>
                  <select
                    value={formData.paymentMethod}
                    onChange={(e) => setFormData(prev => ({ 
                      ...prev, 
                      paymentMethod: e.target.value as 'dinheiro' | 'pix' | 'cartao' | 'transferencia' 
                    }))}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px'
                    }}
                  >
                    <option value="dinheiro">üíµ Dinheiro</option>
                    <option value="pix">üì± PIX</option>
                    <option value="cartao">üí≥ Cart√£o</option>
                    <option value="transferencia">üè¶ Transfer√™ncia</option>
                  </select>
                </div>
                
                <div>
                  <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>
                    Status
                  </label>
                  <select
                    value={formData.status}
                    onChange={(e) => setFormData(prev => ({ 
                      ...prev, 
                      status: e.target.value as 'pago' | 'pendente' 
                    }))}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px'
                    }}
                  >
                    <option value="pago">‚úÖ Pago</option>
                    <option value="pendente">‚è≥ Pendente</option>
                  </select>
                </div>
              </div>

              <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end' }}>
                <button
                  type="button"
                  onClick={() => setShowForm(false)}
                  style={{
                    padding: '0.75rem 1.5rem',
                    backgroundColor: '#6c757d',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  style={{
                    padding: '0.75rem 1.5rem',
                    backgroundColor: formData.type === 'receita' ? '#28a745' : '#dc3545',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}
                >
                  Salvar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Conte√∫do das Abas */}
      {activeTab === 'overview' && (
        <div className="card">
          <h3 style={{ margin: '0 0 1.5rem 0' }}>üìä Vis√£o Geral</h3>
          {transactions.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '2rem', color: '#666' }}>
              <h4>Nenhuma transa√ß√£o registrada</h4>
              <p>Comece adicionando suas receitas e despesas usando os bot√µes acima</p>
            </div>
          ) : (
            <div>
              <p>Total de transa√ß√µes: {transactions.length}</p>
              <p>Receitas: {transactions.filter(t => t.type === 'receita').length}</p>
              <p>Despesas: {transactions.filter(t => t.type === 'despesa').length}</p>
            </div>
          )}
        </div>
      )}

      {(activeTab === 'comercial' || activeTab === 'pessoal') && (
        <div className="card">
          <h3 style={{ margin: '0 0 1.5rem 0' }}>
            {activeTab === 'comercial' ? 'üè™ Transa√ß√µes Comerciais' : 'üë§ Transa√ß√µes Pessoais'}
          </h3>
          
          {transactions
            .filter(t => t.financialType === activeTab)
            .length === 0 ? (
            <p style={{ color: '#666', textAlign: 'center', padding: '2rem' }}>
              Nenhuma transa√ß√£o {activeTab} registrada
            </p>
          ) : (
            <div style={{ display: 'grid', gap: '1rem' }}>
              {transactions
                .filter(t => t.financialType === activeTab)
                .sort((a, b) => b.date.getTime() - a.date.getTime())
                .map((transaction) => (
                <div key={transaction.id} style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr auto auto',
                  gap: '1rem',
                  alignItems: 'center',
                  padding: '1rem',
                  backgroundColor: transaction.status === 'pendente' ? '#fff3cd' : '#f8f9fa',
                  borderRadius: '8px',
                  border: `2px solid ${
                    transaction.status === 'pendente' ? '#ffc107' : 
                    transaction.type === 'receita' ? '#28a745' : '#dc3545'
                  }`,
                  opacity: transaction.status === 'pendente' ? 0.8 : 1
                }}>
                  <div>
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '0.5rem',
                      fontWeight: 'bold', 
                      marginBottom: '0.25rem' 
                    }}>
                      {transaction.description}
                      {transaction.status === 'pendente' && (
                        <span style={{
                          padding: '0.2rem 0.5rem',
                          backgroundColor: '#ffc107',
                          color: '#212529',
                          borderRadius: '12px',
                          fontSize: '0.7rem',
                          fontWeight: 'bold'
                        }}>
                          ‚è≥ PENDENTE
                        </span>
                      )}
                      {(transaction as any).autoGenerated && (
                        <span style={{
                          padding: '0.2rem 0.5rem',
                          backgroundColor: '#007bff',
                          color: 'white',
                          borderRadius: '12px',
                          fontSize: '0.7rem',
                          fontWeight: 'bold'
                        }}>
                          üîÑ AUTO
                        </span>
                      )}
                    </div>
                    <div style={{ fontSize: '0.9rem', color: '#666', marginBottom: '0.25rem' }}>
                      üìÇ {transaction.category} ‚Ä¢ üìÖ {transaction.date.toLocaleDateString('pt-BR')}
                      {(transaction as any).autoGenerated && (
                        <span style={{ color: '#007bff', marginLeft: '0.5rem' }}>
                          ‚Ä¢ üõçÔ∏è Sincronizado com Vendas
                        </span>
                      )}
                    </div>
                    <div style={{ fontSize: '0.8rem', color: '#666' }}>
                      {transaction.paymentMethod === 'dinheiro' && 'üíµ'}
                      {transaction.paymentMethod === 'pix' && 'üì±'}
                      {transaction.paymentMethod === 'cartao' && 'üí≥'}
                      {transaction.paymentMethod === 'transferencia' && 'üè¶'}
                      {' '}{transaction.paymentMethod} ‚Ä¢ {transaction.status === 'pago' ? '‚úÖ Pago' : '‚è≥ Pendente'}
                    </div>
                  </div>
                  
                  <div style={{ textAlign: 'right' }}>
                    <div style={{
                      fontSize: '1.2rem',
                      fontWeight: 'bold',
                      color: transaction.type === 'receita' ? '#28a745' : '#dc3545'
                    }}>
                      {transaction.type === 'receita' ? '+' : '-'}R$ {transaction.amount.toFixed(2)}
                    </div>
                  </div>
                  
                  <div style={{ display: 'flex', gap: '0.5rem' }}>
                    {/* Bot√£o de alternar status */}
                    <button
                      onClick={() => handleToggleStatus(transaction.id)}
                      style={{
                        padding: '0.5rem',
                        backgroundColor: transaction.status === 'pago' ? '#ffc107' : '#28a745',
                        color: 'white',
                        border: 'none',
                        borderRadius: '6px',
                        cursor: 'pointer',
                        fontSize: '0.8rem'
                      }}
                      title={transaction.status === 'pago' ? 'Marcar como pendente' : 'Marcar como pago'}
                    >
                      {transaction.status === 'pago' ? '‚è≥' : '‚úÖ'}
                    </button>
                    
                    {/* Bot√£o de editar */}
                    <button
                      onClick={() => handleEditTransaction(transaction)}
                      style={{
                        padding: '0.5rem',
                        backgroundColor: '#007bff',
                        color: 'white',
                        border: 'none',
                        borderRadius: '6px',
                        cursor: 'pointer'
                      }}
                      title="Editar transa√ß√£o"
                    >
                      ‚úèÔ∏è
                    </button>
                    
                    {/* Bot√£o de deletar */}
                    <button
                      onClick={() => handleDeleteTransaction(transaction.id)}
                      style={{
                        padding: '0.5rem',
                        backgroundColor: '#dc3545',
                        color: 'white',
                        border: 'none',
                        borderRadius: '6px',
                        cursor: 'pointer'
                      }}
                      title="Excluir transa√ß√£o"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {activeTab === 'relatorio' && (
        <div style={{ display: 'grid', gap: '2rem' }}>
          {/* Relat√≥rio Geral */}
          <div className="card">
            <h3 style={{ margin: '0 0 1.5rem 0' }}>üìã Relat√≥rio Geral</h3>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: '#28a745' }}>üìà Receitas Totais</h4>
                <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#28a745' }}>
                  R$ {summary.totalReceitas.toFixed(2)}
                </p>
              </div>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: '#dc3545' }}>üìâ Despesas Totais</h4>
                <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#dc3545' }}>
                  R$ {summary.totalDespesas.toFixed(2)}
                </p>
              </div>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: summary.saldoLiquido >= 0 ? '#007bff' : '#dc3545' }}>üí∞ Saldo L√≠quido</h4>
                <p style={{ 
                  fontSize: '1.5rem', 
                  fontWeight: 'bold', 
                  color: summary.saldoLiquido >= 0 ? '#007bff' : '#dc3545' 
                }}>
                  R$ {summary.saldoLiquido.toFixed(2)}
                </p>
              </div>
            </div>
          </div>

          {/* Relat√≥rio Comercial */}
          <div className="card" style={{ border: '2px solid #6c757d' }}>
            <h3 style={{ margin: '0 0 1.5rem 0', color: '#6c757d' }}>üè™ Relat√≥rio Comercial</h3>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: '#28a745' }}>üìà Receitas</h4>
                <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#28a745' }}>
                  R$ {summary.totalReceitasComerciais.toFixed(2)}
                </p>
                <p style={{ fontSize: '0.9rem', color: '#666' }}>
                  {transactions.filter(t => t.type === 'receita' && t.financialType === 'comercial').length} transa√ß√µes
                </p>
              </div>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: '#dc3545' }}>üìâ Despesas</h4>
                <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#dc3545' }}>
                  R$ {summary.totalDespesasComerciais.toFixed(2)}
                </p>
                <p style={{ fontSize: '0.9rem', color: '#666' }}>
                  {transactions.filter(t => t.type === 'despesa' && t.financialType === 'comercial').length} transa√ß√µes
                </p>
              </div>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: summary.saldoComercial >= 0 ? '#28a745' : '#dc3545' }}>üí∞ Lucro</h4>
                <p style={{ 
                  fontSize: '1.5rem', 
                  fontWeight: 'bold', 
                  color: summary.saldoComercial >= 0 ? '#28a745' : '#dc3545' 
                }}>
                  R$ {summary.saldoComercial.toFixed(2)}
                </p>
                <p style={{ fontSize: '0.9rem', color: '#666' }}>
                  Margem: {summary.totalReceitasComerciais > 0 ? 
                    ((summary.saldoComercial / summary.totalReceitasComerciais) * 100).toFixed(1) : 0}%
                </p>
              </div>
            </div>
          </div>

          {/* Relat√≥rio Pessoal */}
          <div className="card" style={{ border: '2px solid #007bff' }}>
            <h3 style={{ margin: '0 0 1.5rem 0', color: '#007bff' }}>üë§ Relat√≥rio Pessoal</h3>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: '#28a745' }}>üìà Receitas</h4>
                <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#28a745' }}>
                  R$ {summary.totalReceitasPessoais.toFixed(2)}
                </p>
                <p style={{ fontSize: '0.9rem', color: '#666' }}>
                  {transactions.filter(t => t.type === 'receita' && t.financialType === 'pessoal').length} transa√ß√µes
                </p>
              </div>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: '#dc3545' }}>üìâ Despesas</h4>
                <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#dc3545' }}>
                  R$ {summary.totalDespesasPessoais.toFixed(2)}
                </p>
                <p style={{ fontSize: '0.9rem', color: '#666' }}>
                  {transactions.filter(t => t.type === 'despesa' && t.financialType === 'pessoal').length} transa√ß√µes
                </p>
              </div>
              <div style={{ padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <h4 style={{ color: summary.saldoPessoal >= 0 ? '#28a745' : '#dc3545' }}>üí∞ Saldo</h4>
                <p style={{ 
                  fontSize: '1.5rem', 
                  fontWeight: 'bold', 
                  color: summary.saldoPessoal >= 0 ? '#28a745' : '#dc3545' 
                }}>
                  R$ {summary.saldoPessoal.toFixed(2)}
                </p>
                <p style={{ fontSize: '0.9rem', color: '#666' }}>
                  Taxa poupan√ßa: {summary.totalReceitasPessoais > 0 ? 
                    ((summary.saldoPessoal / summary.totalReceitasPessoais) * 100).toFixed(1) : 0}%
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}