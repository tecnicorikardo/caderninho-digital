// Chatbot IA - Caderninho Digital
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const Groq = require('groq-sdk');
const admin = require('firebase-admin');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());
app.use(require('cors')());

// Configura√ß√µes das vari√°veis de ambiente
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const SYSTEM_API_URL = process.env.SYSTEM_API_URL || 'https://caderninhodigital.netlify.app';

console.log('ü§ñ Iniciando Chatbot IA - Caderninho Digital...');
console.log('üîë Telegram Token:', TELEGRAM_TOKEN ? 'Configurado' : 'ERRO: N√£o encontrado');
console.log('üß† Groq API:', GROQ_API_KEY ? 'Configurado' : 'ERRO: N√£o encontrado');
console.log('üåê Sistema URL:', SYSTEM_API_URL);

if (!TELEGRAM_TOKEN || !GROQ_API_KEY) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente obrigat√≥rias n√£o configuradas!');
  process.exit(1);
}

// Inicializar Firebase Admin
let db = null;
let firebaseConnected = false;

try {
  // Configura√ß√£o do Firebase usando Web SDK config
  const firebaseConfig = {
    apiKey: "AIzaSyBwJQ8_Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8E",
    authDomain: "caderninho-digital-2024.firebaseapp.com",
    projectId: "caderninho-digital-2024",
    storageBucket: "caderninho-digital-2024.appspot.com",
    messagingSenderId: "123456789",
    appId: "1:123456789:web:abcdef123456"
  };

  if (!admin.apps.length) {
    admin.initializeApp({
      projectId: 'caderninho-digital-2024'
    });
  }
  db = admin.firestore();
  firebaseConnected = true;
  console.log('üî• Firebase Admin conectado');
} catch (error) {
  console.error('‚ùå Firebase n√£o conectado:', error.message);
  console.log('‚ö†Ô∏è  Continuando sem Firebase - dados em tempo real n√£o dispon√≠veis');
  firebaseConnected = false;
}

// Inicializar servi√ßos
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });
const groq = new Groq({ apiKey: GROQ_API_KEY });

// Armazenamento em mem√≥ria
const users = new Map();

// Fun√ß√µes para buscar dados reais do Firebase
async function getVendasData() {
  if (!firebaseConnected || !db) {
    // Dados simulados quando Firebase n√£o est√° conectado
    return {
      totalHoje: '0.00',
      quantidadeHoje: 0,
      mediaHoje: '0.00',
      totalVendas: 0,
      simulado: true
    };
  }
  
  try {
    console.log('üîç Buscando vendas no Firebase...');
    const vendasSnapshot = await db.collection('sales').where('userId', '==', 'ECYMxTpm46b2iNUNU0aNHIbdfTJ2').get();
    console.log(`üìä Vendas encontradas: ${vendasSnapshot.size}`);
    
    const vendas = vendasSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    console.log('üìã Vendas processadas:', vendas.length);
    
    const hoje = new Date().toDateString();
    const vendasHoje = vendas.filter(venda => {
      const dataVenda = new Date(venda.createdAt?.seconds * 1000 || venda.createdAt || Date.now()).toDateString();
      return dataVenda === hoje;
    });
    
    const totalHoje = vendasHoje.reduce((sum, venda) => sum + (venda.total || 0), 0);
    const mediaHoje = vendasHoje.length > 0 ? totalHoje / vendasHoje.length : 0;
    
    return {
      totalHoje: totalHoje.toFixed(2),
      quantidadeHoje: vendasHoje.length,
      mediaHoje: mediaHoje.toFixed(2),
      totalVendas: vendas.length,
      simulado: false
    };
  } catch (error) {
    console.error('‚ùå Erro ao buscar vendas:', error);
    return {
      totalHoje: '0.00',
      quantidadeHoje: 0,
      mediaHoje: '0.00',
      totalVendas: 0,
      simulado: true
    };
  }
}

async function getClientesData() {
  if (!firebaseConnected || !db) {
    return { total: 0, novos: 0, ativos: 0, simulado: true };
  }
  
  try {
    const clientesSnapshot = await db.collection('clients').where('userId', '==', 'ECYMxTpm46b2iNUNU0aNHIbdfTJ2').get();
    const clientes = clientesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
    const mesAtual = new Date().getMonth();
    const anoAtual = new Date().getFullYear();
    
    const clientesNovos = clientes.filter(cliente => {
      if (!cliente.dataCadastro) return false;
      const dataCadastro = new Date(cliente.dataCadastro.seconds * 1000 || cliente.dataCadastro);
      return dataCadastro.getMonth() === mesAtual && dataCadastro.getFullYear() === anoAtual;
    });
    
    return {
      total: clientes.length,
      novos: clientesNovos.length,
      ativos: clientes.filter(c => c.ativo !== false).length,
      simulado: false
    };
  } catch (error) {
    console.error('‚ùå Erro ao buscar clientes:', error);
    return { total: 0, novos: 0, ativos: 0, simulado: true };
  }
}

async function getEstoqueData() {
  if (!firebaseConnected || !db) {
    return { total: 0, baixoEstoque: 0, disponivel: 0, simulado: true };
  }
  
  try {
    const produtosSnapshot = await db.collection('products').where('userId', '==', 'ECYMxTpm46b2iNUNU0aNHIbdfTJ2').get();
    const produtos = produtosSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
    const baixoEstoque = produtos.filter(produto => (produto.estoque || 0) < (produto.estoqueMinimo || 5));
    const disponivel = produtos.filter(produto => (produto.estoque || 0) > 0);
    
    return {
      total: produtos.length,
      baixoEstoque: baixoEstoque.length,
      disponivel: disponivel.length,
      simulado: false
    };
  } catch (error) {
    console.error('‚ùå Erro ao buscar estoque:', error);
    return { total: 0, baixoEstoque: 0, disponivel: 0, simulado: true };
  }
}

// Webhook endpoint
app.post(`/webhook`, async (req, res) => {
  try {
    console.log('üì® Webhook recebido');
    
    const update = req.body;
    
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
    
    res.sendStatus(200);
  } catch (error) {
    console.error('‚ùå Erro no webhook:', error);
    res.sendStatus(500);
  }
});

// Health check
app.get('/', (req, res) => {
  res.json({
    status: 'online',
    service: 'Caderninho Digital Chatbot IA',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    integrations: {
      telegram: !!TELEGRAM_TOKEN,
      groq: !!GROQ_API_KEY,
      system: SYSTEM_API_URL
    }
  });
});

// Processar mensagens
async function handleMessage(message) {
  const chatId = message.chat.id;
  const userId = message.from.id.toString();
  const text = message.text;
  
  console.log('üí¨ Mensagem de', message.from.first_name, ':', text);
  
  try {
    // Registrar usu√°rio
    if (!users.has(userId)) {
      users.set(userId, {
        id: userId,
        chatId: chatId,
        firstName: message.from.first_name,
        lastName: message.from.last_name,
        username: message.from.username,
        isAuthenticated: false,
        createdAt: new Date()
      });
      console.log('üë§ Novo usu√°rio:', message.from.first_name);
    }
    
    // Processar comandos ou linguagem natural
    if (text.startsWith('/')) {
      await handleCommand(chatId, userId, text);
    } else {
      await handleNaturalLanguage(chatId, userId, text);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem:', error);
    await sendMessage(chatId, '‚ùå Desculpe, ocorreu um erro. Tente novamente.');
  }
}

// Processar comandos
async function handleCommand(chatId, userId, command) {
  console.log('üîß Comando:', command);
  
  switch (command) {
    case '/start':
      await sendWelcomeMessage(chatId, userId);
      break;
      
    case '/help':
      await sendMessage(chatId, `‚ùì *Ajuda - Caderninho Digital Bot*\n\nü§ñ Sou seu assistente inteligente!\n\n*Comandos:*\n/start - Menu inicial\n/help - Esta ajuda\n/menu - Menu principal\n\n*Converse naturalmente:*\n"Quanto vendi hoje?"\n"Quais s√£o meus clientes?"\n"Como est√° o estoque?"`);
      break;
      
    case '/menu':
      await sendMainMenu(chatId, userId);
      break;
      
    default:
      await sendMessage(chatId, '‚ùì Comando n√£o reconhecido. Use /help para ajuda.');
  }
}

// Processar linguagem natural com Groq AI
async function handleNaturalLanguage(chatId, userId, text) {
  console.log('üß† Processando com IA:', text);
  
  try {
    const user = users.get(userId);
    
    // Buscar dados reais para contexto da IA
    const vendasData = await getVendasData();
    const clientesData = await getClientesData();
    const estoqueData = await getEstoqueData();
    
    const contextData = `
DADOS ATUAIS DO NEG√ìCIO:
- Vendas hoje: R$ ${vendasData.totalHoje} (${vendasData.quantidadeHoje} vendas)
- Total de clientes: ${clientesData.total} (${clientesData.novos} novos este m√™s)
- Produtos em estoque: ${estoqueData.total} (${estoqueData.baixoEstoque} com baixo estoque)
- Status dos dados: ${vendasData.simulado ? 'Sem dados cadastrados' : 'Dados reais do sistema'}`;

    const systemPrompt = `Voc√™ √© um assistente inteligente especializado em gest√£o comercial para o "Caderninho Digital".

PERSONALIDADE:
- Seja conversacional, amig√°vel e proativo
- Use emojis apropriados
- Fa√ßa perguntas para entender melhor as necessidades
- Ofere√ßa insights e sugest√µes baseadas nos dados
- Seja espec√≠fico e pr√°tico nas respostas

CAPACIDADES:
- Analisar vendas e faturamento
- Gerenciar clientes e relacionamento
- Controlar estoque e produtos
- Gerar insights de neg√≥cio
- Sugerir a√ß√µes para melhorar resultados
- Responder d√∫vidas sobre gest√£o comercial

${contextData}

INSTRU√á√ïES:
- Use os dados reais acima para dar respostas precisas
- Se n√£o houver dados, oriente sobre como cadastrar no sistema
- Seja proativo: sugira a√ß√µes baseadas nos dados
- Fa√ßa perguntas para entender melhor o que o usu√°rio precisa
- Ofere√ßa bot√µes de a√ß√£o quando relevante

Usu√°rio: ${user?.firstName || 'Usu√°rio'}`;

    const completion = await groq.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: text }
      ],
      model: 'llama-3.1-8b-instant',
      temperature: 0.8,
      max_tokens: 1200
    });
    
    const aiResponse = completion.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem. Pode reformular?';
    
    console.log('ü§ñ Resposta da IA gerada');
    
    // Adicionar bot√µes contextuais inteligentes
    const buttons = getSmartContextButtons(text, vendasData, clientesData, estoqueData);
    
    if (buttons.length > 0) {
      await sendMessageWithButtons(chatId, aiResponse, buttons);
    } else {
      await sendMessage(chatId, aiResponse);
    }
    
  } catch (error) {
    console.error('‚ùå Erro na IA:', error);
    await sendMessage(chatId, 'ü§ñ Ops! Tive um problema para processar isso. Pode tentar de novo ou usar /menu para ver as op√ß√µes? üòÖ');
  }
}

// Bot√µes contextuais inteligentes
function getSmartContextButtons(text, vendasData, clientesData, estoqueData) {
  const buttons = [];
  const lowerText = text.toLowerCase();
  
  // Bot√µes baseados no contexto da conversa
  if (lowerText.includes('venda') || lowerText.includes('faturamento') || lowerText.includes('receita')) {
    buttons.push([{ text: 'üìä Ver Vendas Detalhadas', callback_data: 'vendas_detalhadas' }]);
    if (vendasData.quantidadeHoje === 0) {
      buttons.push([{ text: '‚ûï Como Registrar Venda', callback_data: 'como_vender' }]);
    }
  }
  
  if (lowerText.includes('cliente') || lowerText.includes('consumidor')) {
    buttons.push([{ text: 'üë• Relat√≥rio de Clientes', callback_data: 'clientes_detalhados' }]);
    if (clientesData.total === 0) {
      buttons.push([{ text: '‚ûï Como Cadastrar Cliente', callback_data: 'como_cadastrar_cliente' }]);
    }
  }
  
  if (lowerText.includes('estoque') || lowerText.includes('produto') || lowerText.includes('mercadoria')) {
    buttons.push([{ text: 'üì¶ Status do Estoque', callback_data: 'estoque_detalhado' }]);
    if (estoqueData.baixoEstoque > 0) {
      buttons.push([{ text: '‚ö†Ô∏è Produtos em Falta', callback_data: 'produtos_falta' }]);
    }
  }
  
  // Sugest√µes inteligentes baseadas nos dados
  if (vendasData.quantidadeHoje > 0 && clientesData.total > 0) {
    buttons.push([{ text: 'üìà An√°lise de Performance', callback_data: 'analise_performance' }]);
  }
  
  // Bot√µes de a√ß√£o r√°pida
  const quickActions = [];
  if (vendasData.simulado) {
    quickActions.push({ text: 'üöÄ Come√ßar a Usar', callback_data: 'tutorial_inicio' });
  } else {
    quickActions.push({ text: 'üìä Dashboard', callback_data: 'dashboard' });
  }
  quickActions.push({ text: '‚ùì Ajuda', callback_data: 'ajuda_completa' });
  
  if (quickActions.length > 0) {
    buttons.push(quickActions);
  }
  
  return buttons;
}

// Processar cliques em bot√µes
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  console.log('üîò Bot√£o clicado:', data);
  
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    switch (data) {
      case 'menu':
        await sendMainMenu(chatId, callbackQuery.from.id.toString());
        break;
        
      case 'vendas':
      case 'vendas_detalhadas':
        await handleVendasDetalhadas(chatId);
        break;
        
      case 'clientes':
      case 'clientes_detalhados':
        await handleClientesDetalhados(chatId);
        break;
        
      case 'estoque':
      case 'estoque_detalhado':
        await handleEstoqueDetalhado(chatId);
        break;
        
      case 'como_vender':
        await sendMessage(chatId, `üìù *Como Registrar uma Venda*\n\n1Ô∏è‚É£ Acesse: ${SYSTEM_API_URL}\n2Ô∏è‚É£ V√° em "Nova Venda"\n3Ô∏è‚É£ Selecione o cliente\n4Ô∏è‚É£ Adicione os produtos\n5Ô∏è‚É£ Escolha a forma de pagamento\n6Ô∏è‚É£ Confirme a venda\n\n‚úÖ *Pronto!* A venda aparecer√° aqui no bot automaticamente!`);
        break;
        
      case 'como_cadastrar_cliente':
        await sendMessage(chatId, `üë§ *Como Cadastrar Cliente*\n\n1Ô∏è‚É£ Acesse: ${SYSTEM_API_URL}\n2Ô∏è‚É£ V√° em "Clientes"\n3Ô∏è‚É£ Clique em "Novo Cliente"\n4Ô∏è‚É£ Preencha nome e telefone\n5Ô∏è‚É£ Salve o cadastro\n\n‚úÖ *Dica:* Clientes cadastrados facilitam vendas fiado e controle de pagamentos!`);
        break;
        
      case 'produtos_falta':
        await handleProdutosFalta(chatId);
        break;
        
      case 'analise_performance':
        await handleAnalisePerformance(chatId);
        break;
        
      case 'dashboard':
        await handleDashboard(chatId);
        break;
        
      case 'tutorial_inicio':
        await sendTutorialInicio(chatId);
        break;
        
      case 'ajuda_completa':
        await sendAjudaCompleta(chatId);
        break;
        
      case 'auto_login':
        const realUserId = 'ECYMxTpm46b2iNUNU0aNHIbdfTJ2';
        const success = await authenticateUser(callbackQuery.from.id, realUserId);
        
        if (success) {
          bot.sendMessage(chatId, `‚úÖ *Login autom√°tico realizado!*\n\nüéâ Agora voc√™ pode consultar seus dados reais!\n\nüí¨ *Teste:* "Quanto vendi hoje?"`, { parse_mode: 'Markdown' });
        } else {
          bot.sendMessage(chatId, `‚ùå *Erro no login*\n\nTente: \`/forcelogin\``, { parse_mode: 'Markdown' });
        }
        break;
        
      case 'como_cadastrar_produto':
        await sendMessage(chatId, `üì¶ *Como Cadastrar Produtos*\n\n1Ô∏è‚É£ Acesse: ${SYSTEM_API_URL}\n2Ô∏è‚É£ V√° em "Produtos"\n3Ô∏è‚É£ Clique em "Novo Produto"\n4Ô∏è‚É£ Preencha:\n   ‚Ä¢ Nome do produto\n   ‚Ä¢ Pre√ßo de venda\n   ‚Ä¢ Quantidade em estoque\n   ‚Ä¢ Estoque m√≠nimo (opcional)\n5Ô∏è‚É£ Salve o produto\n\n‚úÖ *Dica:* Configure estoque m√≠nimo para receber alertas autom√°ticos!`);
        break;
        
      case 'relatorios':
        await handleDashboard(chatId);
        break;
        
      default:
        await sendMessage(chatId, '‚ùì Hmm, n√£o reconheci essa a√ß√£o. Que tal tentar o /menu? ü§î');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no callback:', error);
  }
}

// Mensagens espec√≠ficas
async function sendWelcomeMessage(chatId, userId) {
  const user = users.get(userId);
  const name = user?.firstName || 'Usu√°rio';
  
  // FAZER LOGIN AUTOM√ÅTICO COM DADOS REAIS
  console.log(`üîê Fazendo login autom√°tico para ${name}...`);
  
  // Simular autentica√ß√£o com dados reais
  users.set(userId, {
    ...user,
    isAuthenticated: true,
    firebaseUserId: 'ECYMxTpm46b2iNUNU0aNHIbdfTJ2', // Seu userId real
    authenticatedAt: new Date()
  });
  
  const message = `üéâ *Ol√°, ${name}! Bem-vindo!*

‚úÖ *Login autom√°tico realizado!*
üÜî *Conectado √† sua conta empresarial*

ü§ñ *Caderninho Digital Chatbot IA*
Seu assistente inteligente para gest√£o do neg√≥cio.

üí¨ *Experimente agora:*
‚Ä¢ "Quanto vendi hoje?"
‚Ä¢ "Como est√° meu estoque?"
‚Ä¢ "Quem s√£o meus clientes?"
‚Ä¢ "Resumo do m√™s"

üåê *Sistema:* https://web-gestao-37a85.web.app`;
  
  const buttons = [
    [
      { text: 'üìä Ver Vendas', callback_data: 'vendas_detalhadas' },
      { text: 'üë• Ver Clientes', callback_data: 'clientes_detalhados' }
    ],
    [
      { text: 'üì¶ Ver Estoque', callback_data: 'estoque_detalhado' },
      { text: 'üìà Dashboard', callback_data: 'dashboard' }
    ]
  ];
  
  await sendMessageWithButtons(chatId, message, buttons);
}

async function sendMainMenu(chatId, userId) {
  try {
    // Buscar dados para menu din√¢mico
    const vendasData = await getVendasData();
    const clientesData = await getClientesData();
    const estoqueData = await getEstoqueData();
    
    let statusEmoji = 'üü¢';
    let statusText = 'Sistema operacional';
    
    if (vendasData.simulado) {
      statusEmoji = 'üü°';
      statusText = 'Configure seus dados';
    }
    
    const message = `üè† *Menu Principal*\n\n${statusEmoji} *Status:* ${statusText}\n\nüí∞ *Hoje:* R$ ${vendasData.totalHoje} (${vendasData.quantidadeHoje} vendas)\nüë• *Clientes:* ${clientesData.total}\nüì¶ *Produtos:* ${estoqueData.total}\n\nüí¨ *Converse naturalmente ou use os bot√µes:*`;

    const buttons = [
      [
        { text: 'üìä Vendas Detalhadas', callback_data: 'vendas_detalhadas' },
        { text: 'üë• Gest√£o Clientes', callback_data: 'clientes_detalhados' }
      ],
      [
        { text: 'üì¶ Controle Estoque', callback_data: 'estoque_detalhado' },
        { text: 'üìà Dashboard Executivo', callback_data: 'dashboard' }
      ]
    ];
    
    // Adicionar bot√µes condicionais
    if (vendasData.simulado) {
      buttons.push([{ text: 'üöÄ Tutorial In√≠cio', callback_data: 'tutorial_inicio' }]);
    } else {
      buttons.push([{ text: 'üìà An√°lise Performance', callback_data: 'analise_performance' }]);
    }
    
    buttons.push([{ text: '‚ùì Central de Ajuda', callback_data: 'ajuda_completa' }]);
    
    await sendMessageWithButtons(chatId, message, buttons);
  } catch (error) {
    console.error('‚ùå Erro no menu:', error);
    // Fallback para menu simples
    const message = `üè† *Menu Principal*\n\nEscolha uma op√ß√£o:`;
    const buttons = [
      [
        { text: 'üìä Vendas', callback_data: 'vendas' },
        { text: 'üë• Clientes', callback_data: 'clientes' }
      ],
      [
        { text: 'üì¶ Estoque', callback_data: 'estoque' },
        { text: '‚ùì Ajuda', callback_data: 'ajuda_completa' }
      ]
    ];
    await sendMessageWithButtons(chatId, message, buttons);
  }
}

// Fun√ß√µes de envio
async function sendMessage(chatId, text) {
  try {
    await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
    console.log('‚úÖ Mensagem enviada');
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem:', error);
  }
}

async function sendMessageWithButtons(chatId, text, buttons) {
  try {
    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: buttons
      }
    };
    
    await bot.sendMessage(chatId, text, options);
    console.log('‚úÖ Mensagem com bot√µes enviada');
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem com bot√µes:', error);
  }
}

// ========== FUN√á√ïES INTERATIVAS AVAN√áADAS ==========

async function handleVendasDetalhadas(chatId) {
  try {
    console.log('üìä Buscando dados de vendas detalhadas...');
    const vendasData = await getVendasData();
    
    if (vendasData.simulado) {
      const message = `üìä *Relat√≥rio de Vendas*\n\n‚ùå *Nenhuma venda registrada ainda*\n\nüöÄ *Como come√ßar:*\n‚Ä¢ Acesse: ${SYSTEM_API_URL}\n‚Ä¢ Registre sua primeira venda\n‚Ä¢ Volte aqui para ver os dados!\n\nüí° *Dica:* Quanto mais vendas registrar, mais insights posso te dar!`;
      
      const buttons = [
        [{ text: '‚ûï Como Registrar Venda', callback_data: 'como_vender' }],
        [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
      ];
      
      await sendMessageWithButtons(chatId, message, buttons);
    } else {
      const message = `üìä *Relat√≥rio Detalhado de Vendas*\n\nüí∞ *Hoje:*\n‚Ä¢ Faturamento: R$ ${vendasData.totalToday || vendasData.totalHoje || '0.00'}\n‚Ä¢ Quantidade: ${vendasData.countToday || vendasData.quantidadeHoje || 0} vendas\n‚Ä¢ Ticket m√©dio: R$ ${vendasData.averageTicket || vendasData.mediaHoje || '0.00'}\n\nüìà *Geral:*\n‚Ä¢ Total de vendas: ${vendasData.sales?.length || vendasData.totalVendas || 0}\n\nüéØ *Status:* Dados reais do Firebase\n‚Ä¢ UserID: ECYMxTpm46b2iNUNU0aNHIbdfTJ2`;
      
      const buttons = [
        [
          { text: 'üìà An√°lise Performance', callback_data: 'analise_performance' },
          { text: 'üë• Ver Clientes', callback_data: 'clientes' }
        ],
        [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
      ];
      
      await sendMessageWithButtons(chatId, message, buttons);
    }
  } catch (error) {
    console.error('‚ùå Erro em vendas detalhadas:', error);
    await sendMessage(chatId, '‚ùå Ops! Erro ao buscar dados de vendas. Tente novamente.');
  }
}

async function handleClientesDetalhados(chatId) {
  try {
    const clientesData = await getClientesData();
    
    if (clientesData.simulado || clientesData.total === 0) {
      const message = `üë• *Gest√£o de Clientes*\n\n‚ùå *Nenhum cliente cadastrado*\n\nüéØ *Por que cadastrar clientes?*\n‚Ä¢ Vendas fiado organizadas\n‚Ä¢ Hist√≥rico de compras\n‚Ä¢ Controle de pagamentos\n‚Ä¢ Relacionamento melhor\n\nüöÄ *Vamos come√ßar!*`;
      
      const buttons = [
        [{ text: '‚ûï Como Cadastrar Cliente', callback_data: 'como_cadastrar_cliente' }],
        [{ text: 'üìä Ver Vendas', callback_data: 'vendas' }],
        [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
      ];
      
      await sendMessageWithButtons(chatId, message, buttons);
    } else {
      const message = `üë• *Relat√≥rio de Clientes*\n\nüìä *Resumo:*\n‚Ä¢ Total: ${clientesData.total} clientes\n‚Ä¢ Ativos: ${clientesData.ativos}\n‚Ä¢ Novos este m√™s: ${clientesData.novos}\n\nüí° *Insights:*\n${clientesData.novos > 0 ? 'üéâ Parab√©ns! Voc√™ est√° conquistando novos clientes!' : 'üí™ Que tal uma campanha para atrair novos clientes?'}\n\nüéØ *Dicas:*\n‚Ä¢ Mantenha contato regular\n‚Ä¢ Ofere√ßa promo√ß√µes especiais\n‚Ä¢ Pe√ßa indica√ß√µes`;
      
      const buttons = [
        [
          { text: 'üìä Ver Vendas', callback_data: 'vendas' },
          { text: 'üì¶ Ver Estoque', callback_data: 'estoque' }
        ],
        [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
      ];
      
      await sendMessageWithButtons(chatId, message, buttons);
    }
  } catch (error) {
    console.error('‚ùå Erro em clientes detalhados:', error);
    await sendMessage(chatId, '‚ùå Erro ao buscar dados de clientes. Tente novamente.');
  }
}

async function handleEstoqueDetalhado(chatId) {
  try {
    const estoqueData = await getEstoqueData();
    
    if (estoqueData.simulado || estoqueData.total === 0) {
      const message = `üì¶ *Controle de Estoque*\n\n‚ùå *Nenhum produto cadastrado*\n\nüéØ *Benef√≠cios do controle:*\n‚Ä¢ Evita produtos em falta\n‚Ä¢ Controla custos\n‚Ä¢ Otimiza compras\n‚Ä¢ Reduz perdas\n\nüöÄ *Comece agora!*`;
      
      const buttons = [
        [{ text: '‚ûï Como Cadastrar Produtos', callback_data: 'como_cadastrar_produto' }],
        [{ text: 'üìä Ver Vendas', callback_data: 'vendas' }],
        [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
      ];
      
      await sendMessageWithButtons(chatId, message, buttons);
    } else {
      let alertas = '';
      if (estoqueData.baixoEstoque > 0) {
        alertas = `\n‚ö†Ô∏è *ATEN√á√ÉO:* ${estoqueData.baixoEstoque} produtos com estoque baixo!`;
      }
      
      const message = `üì¶ *Relat√≥rio de Estoque*\n\nüìä *Status:*\n‚Ä¢ Total de produtos: ${estoqueData.total}\n‚Ä¢ Dispon√≠veis: ${estoqueData.disponivel}\n‚Ä¢ Baixo estoque: ${estoqueData.baixoEstoque}${alertas}\n\nüí° *Dicas:*\n‚Ä¢ Monitore produtos em falta\n‚Ä¢ Programe reposi√ß√µes\n‚Ä¢ Analise giro de estoque`;
      
      const buttons = [];
      if (estoqueData.baixoEstoque > 0) {
        buttons.push([{ text: '‚ö†Ô∏è Ver Produtos em Falta', callback_data: 'produtos_falta' }]);
      }
      buttons.push([
        { text: 'üìä Ver Vendas', callback_data: 'vendas' },
        { text: 'üë• Ver Clientes', callback_data: 'clientes' }
      ]);
      buttons.push([{ text: 'üè† Menu Principal', callback_data: 'menu' }]);
      
      await sendMessageWithButtons(chatId, message, buttons);
    }
  } catch (error) {
    console.error('‚ùå Erro em estoque detalhado:', error);
    await sendMessage(chatId, '‚ùå Erro ao buscar dados de estoque. Tente novamente.');
  }
}

async function handleProdutosFalta(chatId) {
  const message = `‚ö†Ô∏è *Produtos com Estoque Baixo*\n\nüîç *Verificando produtos...*\n\nüí° *A√ß√µes recomendadas:*\n‚Ä¢ Reabaste√ßa os produtos em falta\n‚Ä¢ Configure alertas autom√°ticos\n‚Ä¢ Analise quais vendem mais\n\nüìã *Para ver detalhes:*\nAcesse: ${SYSTEM_API_URL}/estoque`;
  
  const buttons = [
    [{ text: 'üì¶ Voltar ao Estoque', callback_data: 'estoque' }],
    [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
  ];
  
  await sendMessageWithButtons(chatId, message, buttons);
}

async function handleAnalisePerformance(chatId) {
  try {
    const vendasData = await getVendasData();
    const clientesData = await getClientesData();
    
    if (vendasData.simulado) {
      await sendMessage(chatId, 'üìà *An√°lise de Performance*\n\n‚ùå Dados insuficientes para an√°lise.\n\nRegistre algumas vendas primeiro!');
      return;
    }
    
    let insights = 'üìà *An√°lise de Performance*\n\n';
    
    // An√°lise de vendas
    if (vendasData.quantidadeHoje > 0) {
      insights += `üéâ *√ìtimo!* Voc√™ j√° fez ${vendasData.quantidadeHoje} vendas hoje!\n`;
    } else {
      insights += `üí™ *Oportunidade:* Ainda n√£o h√° vendas hoje. Que tal uma promo√ß√£o?\n`;
    }
    
    // An√°lise de clientes
    if (clientesData.novos > 0) {
      insights += `üë• *Crescimento:* ${clientesData.novos} novos clientes este m√™s!\n`;
    }
    
    // Sugest√µes
    insights += `\nüí° *Sugest√µes:*\n`;
    if (vendasData.quantidadeHoje === 0) {
      insights += `‚Ä¢ Fa√ßa contato com clientes antigos\n‚Ä¢ Ofere√ßa promo√ß√µes especiais\n`;
    }
    if (clientesData.total < 10) {
      insights += `‚Ä¢ Foque em conquistar novos clientes\n‚Ä¢ Pe√ßa indica√ß√µes\n`;
    }
    
    const buttons = [
      [
        { text: 'üìä Ver Vendas', callback_data: 'vendas' },
        { text: 'üë• Ver Clientes', callback_data: 'clientes' }
      ],
      [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
    ];
    
    await sendMessageWithButtons(chatId, insights, buttons);
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
    await sendMessage(chatId, '‚ùå Erro ao gerar an√°lise. Tente novamente.');
  }
}

async function handleDashboard(chatId) {
  try {
    const vendasData = await getVendasData();
    const clientesData = await getClientesData();
    const estoqueData = await getEstoqueData();
    
    const message = `üìä *Dashboard Executivo*\n\nüí∞ *Vendas Hoje:*\n‚Ä¢ Faturamento: R$ ${vendasData.totalHoje}\n‚Ä¢ Quantidade: ${vendasData.quantidadeHoje}\n\nüë• *Clientes:*\n‚Ä¢ Total: ${clientesData.total}\n‚Ä¢ Novos este m√™s: ${clientesData.novos}\n\nüì¶ *Estoque:*\n‚Ä¢ Produtos: ${estoqueData.total}\n‚Ä¢ Alertas: ${estoqueData.baixoEstoque}\n\nüéØ *Status:* ${vendasData.simulado ? 'Configure o sistema' : 'Operacional'}`;
    
    const buttons = [
      [
        { text: 'üìà An√°lise Completa', callback_data: 'analise_performance' },
        { text: '‚ö†Ô∏è Alertas', callback_data: 'produtos_falta' }
      ],
      [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
    ];
    
    await sendMessageWithButtons(chatId, message, buttons);
  } catch (error) {
    console.error('‚ùå Erro no dashboard:', error);
    await sendMessage(chatId, '‚ùå Erro ao carregar dashboard. Tente novamente.');
  }
}

async function sendTutorialInicio(chatId) {
  const message = `üöÄ *Tutorial - Primeiros Passos*\n\n*Bem-vindo ao Caderninho Digital!*\n\nüìã *Passo a passo:*\n\n1Ô∏è‚É£ *Acesse o sistema:*\n${SYSTEM_API_URL}\n\n2Ô∏è‚É£ *Cadastre produtos:*\n‚Ä¢ Nome, pre√ßo, estoque\n‚Ä¢ Organize por categorias\n\n3Ô∏è‚É£ *Cadastre clientes:*\n‚Ä¢ Nome e telefone\n‚Ä¢ Para vendas fiado\n\n4Ô∏è‚É£ *Registre vendas:*\n‚Ä¢ Selecione produtos\n‚Ä¢ Escolha cliente\n‚Ä¢ Defina pagamento\n\n5Ô∏è‚É£ *Acompanhe aqui no bot:*\n‚Ä¢ Relat√≥rios autom√°ticos\n‚Ä¢ Insights inteligentes\n\nüéØ *Pronto! Seu neg√≥cio organizado!*`;
  
  const buttons = [
    [{ text: 'üìä Ver Dashboard', callback_data: 'dashboard' }],
    [{ text: '‚ùì Ajuda Completa', callback_data: 'ajuda_completa' }],
    [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
  ];
  
  await sendMessageWithButtons(chatId, message, buttons);
}

async function sendAjudaCompleta(chatId) {
  const message = `‚ùì *Central de Ajuda*\n\nü§ñ *Sobre o Bot:*\n‚Ä¢ Sou seu assistente IA\n‚Ä¢ Analiso dados do seu neg√≥cio\n‚Ä¢ Dou insights e sugest√µes\n‚Ä¢ Respondo perguntas naturalmente\n\nüí¨ *Como usar:*\n‚Ä¢ Digite perguntas normalmente\n‚Ä¢ "Quanto vendi hoje?"\n‚Ä¢ "Como est√£o os clientes?"\n‚Ä¢ "Preciso repor estoque?"\n\nüîß *Comandos √∫teis:*\n/start - Menu inicial\n/menu - Menu principal\n/help - Esta ajuda\n\nüåê *Sistema Web:*\n${SYSTEM_API_URL}\n\nüìû *Suporte:*\nSe tiver d√∫vidas, me pergunte!\nEstou aqui para ajudar! üòä`;
  
  const buttons = [
    [
      { text: 'üöÄ Tutorial', callback_data: 'tutorial_inicio' },
      { text: 'üìä Dashboard', callback_data: 'dashboard' }
    ],
    [{ text: 'üè† Menu Principal', callback_data: 'menu' }]
  ];
  
  await sendMessageWithButtons(chatId, message, buttons);
}

// Inicializar servidor
async function startServer() {
  try {
    console.log('üßπ Limpando webhook...');
    await bot.deleteWebHook();
    
    console.log('‚è≥ Aguardando...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const botInfo = await bot.getMe();
    console.log('ü§ñ Bot conectado:', botInfo.username);
    console.log('üÜî Bot ID:', botInfo.id);
    
    app.listen(port, async () => {
      console.log(`üöÄ Servidor rodando na porta ${port}`);
      console.log('üì± Chatbot IA pronto!');
      
      // Configurar webhook automaticamente se estiver no Render
      const webhookUrl = process.env.RENDER_EXTERNAL_URL;
      if (webhookUrl) {
        try {
          console.log('üîó Configurando webhook automaticamente...');
          await bot.setWebHook(`${webhookUrl}/webhook`);
          console.log('‚úÖ Webhook configurado:', `${webhookUrl}/webhook`);
        } catch (error) {
          console.error('‚ùå Erro ao configurar webhook:', error);
          console.log('üìã Configure manualmente:');
          console.log(`curl -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/setWebhook -d "url=${webhookUrl}/webhook"`);
        }
      } else {
        console.log('üìã Para configurar webhook manualmente:');
        console.log(`curl -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/setWebhook -d "url=https://seu-app.onrender.com/webhook"`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao iniciar servidor:', error);
  }
}

startServer();